{
  "version": 3,
  "sources": ["../../../node_modules/.pnpm/protomaps-themes-base@4.3.1/node_modules/protomaps-themes-base/src/language.ts", "../../../node_modules/.pnpm/protomaps-themes-base@4.3.1/node_modules/protomaps-themes-base/src/base_layers.ts", "../../../node_modules/.pnpm/protomaps-themes-base@4.3.1/node_modules/protomaps-themes-base/src/themes.ts", "../../../node_modules/.pnpm/protomaps-themes-base@4.3.1/node_modules/protomaps-themes-base/src/index.ts", "../../Private/Assets/Protomaps-MapLibre.js"],
  "sourcesContent": ["function get_name_block(\n  script_segment: \"name\" | \"name2\" | \"name3\",\n  regular?: string,\n) {\n  let script = \"script\";\n\n  if (script_segment === \"name\") {\n    script = \"script\";\n  } else if (script_segment === \"name2\") {\n    script = \"script2\";\n  } else if (script_segment === \"name3\") {\n    script = \"script3\";\n  }\n\n  return [\n    [\"coalesce\", [\"get\", `pgf:${script_segment}`], [\"get\", script_segment]],\n    {\n      \"text-font\": [\n        \"case\",\n        [\"==\", [\"get\", script], \"Devanagari\"],\n        [\"literal\", [\"Noto Sans Devanagari Regular v1\"]],\n        [\"literal\", [regular || \"Noto Sans Regular\"]],\n      ],\n    },\n  ];\n}\n\nfunction is_not_in_target_script(\n  lang: string,\n  script: string,\n  script_segment: \"name\" | \"name2\" | \"name3\",\n) {\n  let suffix = \"name\";\n  if (script_segment === \"name\") {\n    suffix = \"\";\n  } else if (script_segment === \"name2\") {\n    suffix = \"2\";\n  } else if (script_segment === \"name3\") {\n    suffix = \"3\";\n  }\n\n  if (script === \"Latin\") {\n    return [\"has\", `script${suffix}`];\n  }\n\n  if (lang === \"ja\") {\n    return [\n      \"all\",\n      [\"!=\", [\"get\", `script${suffix}`], \"Han\"],\n      [\"!=\", [\"get\", `script${suffix}`], \"Hiragana\"],\n      [\"!=\", [\"get\", `script${suffix}`], \"Katakana\"],\n      [\"!=\", [\"get\", `script${suffix}`], \"Mixed-Japanese\"],\n    ];\n  }\n\n  return [\"!=\", [\"get\", `script${suffix}`], script];\n}\n\nfunction get_font_formatting(script: string) {\n  if (script === \"Devanagari\") {\n    return {\n      \"text-font\": [\"literal\", [\"Noto Sans Devanagari Regular v1\"]],\n    };\n  }\n  return {};\n}\n\nfunction get_default_script(lang: string) {\n  const pair = language_script_pairs.find((d) => d.lang === lang);\n  return pair === undefined ? \"Latin\" : pair.script;\n}\n\nexport function get_country_name(lang: string, script?: string) {\n  const _script = script || get_default_script(lang);\n  let name_prefix: string;\n  if (_script === \"Devanagari\") {\n    name_prefix = \"pgf:\";\n  } else {\n    name_prefix = \"\";\n  }\n  return [\n    \"format\",\n    [\"coalesce\", [\"get\", `${name_prefix}name:${lang}`], [\"get\", \"name:en\"]],\n    get_font_formatting(_script),\n  ];\n}\n\nexport function get_multiline_name(\n  lang: string,\n  script?: string,\n  regular?: string,\n) {\n  const _script = script || get_default_script(lang);\n  let name_prefix: string;\n  if (_script === \"Devanagari\") {\n    name_prefix = \"pgf:\";\n  } else {\n    name_prefix = \"\";\n  }\n\n  const result = [\n    \"case\",\n    [\n      \"all\",\n      [\"any\", [\"has\", \"name\"], [\"has\", \"pgf:name\"]],\n      [\"!\", [\"any\", [\"has\", \"name2\"], [\"has\", \"pgf:name2\"]]],\n      [\"!\", [\"any\", [\"has\", \"name3\"], [\"has\", \"pgf:name3\"]]],\n    ],\n    // The local name has 1 script segment: `name`\n    [\n      \"case\",\n      is_not_in_target_script(lang, _script, \"name\"),\n      // `name` is not in the target script\n      [\n        \"case\",\n        [\"any\", [\"is-supported-script\", [\"get\", \"name\"]], [\"has\", \"pgf:name\"]],\n        // `name` can be rendered correctly\n        [\n          \"format\",\n          [\n            \"coalesce\",\n            [\"get\", `${name_prefix}name:${lang}`],\n            [\"get\", \"name:en\"], // Always fallback to English\n          ],\n          get_font_formatting(_script),\n          \"\\n\",\n          {},\n          [\n            \"case\",\n            [\n              \"all\",\n              [\"!\", [\"has\", `${name_prefix}name:${lang}`]],\n              [\"has\", \"name:en\"],\n              [\"!\", [\"has\", \"script\"]],\n            ],\n            // We did fallback to English in the first line and `name` is Latin\n            \"\",\n            [\"coalesce\", [\"get\", \"pgf:name\"], [\"get\", \"name\"]],\n          ],\n          {\n            \"text-font\": [\n              \"case\",\n              [\"==\", [\"get\", \"script\"], \"Devanagari\"],\n              [\"literal\", [\"Noto Sans Devanagari Regular v1\"]],\n              [\"literal\", [regular || \"Noto Sans Regular\"]],\n            ],\n          },\n        ],\n        // `name` cannot be rendered correctly, fallback to `name:en`\n        [\"get\", \"name:en\"],\n      ],\n      // `name` is in the target script\n      [\n        \"format\",\n        [\n          \"coalesce\",\n          [\"get\", `${name_prefix}name:${lang}`],\n          [\"get\", \"pgf:name\"],\n          [\"get\", \"name\"],\n        ],\n        get_font_formatting(_script),\n      ],\n    ],\n    [\n      \"all\",\n      [\"any\", [\"has\", \"name\"], [\"has\", \"pgf:name\"]],\n      [\"any\", [\"has\", \"name2\"], [\"has\", \"pgf:name2\"]],\n      [\"!\", [\"any\", [\"has\", \"name3\"], [\"has\", \"pgf:name3\"]]],\n    ],\n    // The local name has 2 script segments: `name` and `name2`\n    [\n      \"case\",\n      [\n        \"all\",\n        is_not_in_target_script(lang, _script, \"name\"),\n        is_not_in_target_script(lang, _script, \"name2\"),\n      ],\n      // Both `name` and `name2` are not in the target script\n      [\n        \"format\",\n        [\"get\", `${name_prefix}name:${lang}`],\n        get_font_formatting(_script),\n        \"\\n\",\n        {},\n        ...get_name_block(\"name\"),\n        \"\\n\",\n        {},\n        ...get_name_block(\"name2\"),\n      ],\n      // Either `name` or `name2` is in the target script\n      [\n        \"case\",\n        is_not_in_target_script(lang, _script, \"name2\"),\n        // `name2` is not in the target script, therefore `name` is in the target script\n        [\n          \"format\",\n          [\n            \"coalesce\",\n            [\"get\", `${name_prefix}name:${lang}`],\n            [\"get\", \"pgf:name\"],\n            [\"get\", \"name\"],\n          ],\n          get_font_formatting(_script),\n          \"\\n\",\n          {},\n          ...get_name_block(\"name2\"),\n        ],\n        // `name2` is in the target script, therefore `name` is not in the target script\n        [\n          \"format\",\n          [\n            \"coalesce\",\n            [\"get\", `${name_prefix}name:${lang}`],\n            [\"get\", \"pgf:name2\"],\n            [\"get\", \"name2\"],\n          ],\n          get_font_formatting(_script),\n          \"\\n\",\n          {},\n          ...get_name_block(\"name\"),\n        ],\n      ],\n    ],\n    // The local name has 3 script segments: `name`, `name2`, and `name3`\n    [\n      \"case\",\n      [\n        \"all\",\n        is_not_in_target_script(lang, _script, \"name\"),\n        is_not_in_target_script(lang, _script, \"name2\"),\n        is_not_in_target_script(lang, _script, \"name3\"),\n      ],\n      // All three `name`, `name2`, and `name3` are not in the target script\n      [\n        \"format\",\n        [\"get\", `${name_prefix}name:${lang}`],\n        get_font_formatting(_script),\n        \"\\n\",\n        {},\n        ...get_name_block(\"name\"),\n        \"\\n\",\n        {},\n        ...get_name_block(\"name2\"),\n        \"\\n\",\n        {},\n        ...get_name_block(\"name3\"),\n      ],\n      // Exactly one of the 3 script segments `name`, `name2`, or `name3` is in the target script\n      [\n        \"case\",\n        [\"!\", is_not_in_target_script(lang, _script, \"name\")],\n        // `name` is in the target script, and `name2` and `name3` are not\n        [\n          \"format\",\n          [\n            \"coalesce\",\n            [\"get\", `${name_prefix}name:${lang}`],\n            [\"get\", \"pgf:name\"],\n            [\"get\", \"name\"],\n          ],\n          get_font_formatting(_script),\n          \"\\n\",\n          {},\n          ...get_name_block(\"name2\"),\n          \"\\n\",\n          {},\n          ...get_name_block(\"name3\"),\n        ],\n        [\"!\", is_not_in_target_script(lang, _script, \"name2\")],\n        // `name2` is in the target script, and `name` and `name3` are not\n        [\n          \"format\",\n          [\n            \"coalesce\",\n            [\"get\", `${name_prefix}name:${lang}`],\n            [\"get\", \"pgf:name2\"],\n            [\"get\", \"name2\"],\n          ],\n          get_font_formatting(_script),\n          \"\\n\",\n          {},\n          ...get_name_block(\"name\"),\n          \"\\n\",\n          {},\n          ...get_name_block(\"name3\"),\n        ],\n        // `name3` is in the target script, and `name` and `name2` are not\n        [\n          \"format\",\n          [\n            \"coalesce\",\n            [\"get\", `${name_prefix}name:${lang}`],\n            [\"get\", \"pgf:name3\"],\n            [\"get\", \"name3\"],\n          ],\n          get_font_formatting(_script),\n          \"\\n\",\n          {},\n          ...get_name_block(\"name\"),\n          \"\\n\",\n          {},\n          ...get_name_block(\"name2\"),\n        ],\n      ],\n    ],\n  ];\n  return result;\n}\n\nexport const language_script_pairs = [\n  {\n    lang: \"ar\",\n    full_name: \"Arabic\",\n    script: \"Arabic\",\n  },\n  {\n    lang: \"cs\",\n    full_name: \"Czech\",\n    script: \"Latin\",\n  },\n  {\n    lang: \"bg\",\n    full_name: \"Bulgarian\",\n    script: \"Cyrillic\",\n  },\n  {\n    lang: \"da\",\n    full_name: \"Danish\",\n    script: \"Latin\",\n  },\n  {\n    lang: \"de\",\n    full_name: \"German\",\n    script: \"Latin\",\n  },\n  {\n    lang: \"el\",\n    full_name: \"Greek\",\n    script: \"Greek\",\n  },\n  {\n    lang: \"en\",\n    full_name: \"English\",\n    script: \"Latin\",\n  },\n  {\n    lang: \"es\",\n    full_name: \"Spanish\",\n    script: \"Latin\",\n  },\n  {\n    lang: \"et\",\n    full_name: \"Estonian\",\n    script: \"Latin\",\n  },\n  {\n    lang: \"fa\",\n    full_name: \"Persian\",\n    script: \"Arabic\",\n  },\n  {\n    lang: \"fi\",\n    full_name: \"Finnish\",\n    script: \"Latin\",\n  },\n  {\n    lang: \"fr\",\n    full_name: \"French\",\n    script: \"Latin\",\n  },\n  {\n    lang: \"ga\",\n    full_name: \"Irish\",\n    script: \"Latin\",\n  },\n  {\n    lang: \"he\",\n    full_name: \"Hebrew\",\n    script: \"Hebrew\",\n  },\n  {\n    lang: \"hi\",\n    full_name: \"Hindi\",\n    script: \"Devanagari\",\n  },\n  {\n    lang: \"hr\",\n    full_name: \"Croatian\",\n    script: \"Latin\",\n  },\n  {\n    lang: \"hu\",\n    full_name: \"Hungarian\",\n    script: \"Latin\",\n  },\n  {\n    lang: \"id\",\n    full_name: \"Indonesian\",\n    script: \"Latin\",\n  },\n  {\n    lang: \"it\",\n    full_name: \"Italian\",\n    script: \"Latin\",\n  },\n  {\n    lang: \"ja\",\n    full_name: \"Japanese\",\n    // Japanese is a special case, using multiple scripts\n    script: \"\",\n  },\n  {\n    lang: \"ko\",\n    full_name: \"Korean\",\n    script: \"Hangul\",\n  },\n  {\n    lang: \"lt\",\n    full_name: \"Lithuanian\",\n    script: \"Latin\",\n  },\n  {\n    lang: \"lv\",\n    full_name: \"Latvian\",\n    script: \"Latin\",\n  },\n  {\n    lang: \"ne\",\n    full_name: \"Nepali\",\n    script: \"Devanagari\",\n  },\n  {\n    lang: \"nl\",\n    full_name: \"Dutch\",\n    script: \"Latin\",\n  },\n  {\n    lang: \"no\",\n    full_name: \"Norwegian\",\n    script: \"Latin\",\n  },\n  {\n    lang: \"mr\",\n    full_name: \"Marathi\",\n    script: \"Devanagari\",\n  },\n  {\n    lang: \"mt\",\n    full_name: \"Maltese\",\n    script: \"Latin\",\n  },\n  {\n    lang: \"pl\",\n    full_name: \"Polish\",\n    script: \"Latin\",\n  },\n  {\n    lang: \"pt\",\n    full_name: \"Portuguese\",\n    script: \"Latin\",\n  },\n  {\n    lang: \"ro\",\n    full_name: \"Romanian\",\n    script: \"Latin\",\n  },\n  {\n    lang: \"ru\",\n    full_name: \"Russian\",\n    script: \"Cyrillic\",\n  },\n  {\n    lang: \"sk\",\n    full_name: \"Slovak\",\n    script: \"Latin\",\n  },\n  {\n    lang: \"sl\",\n    full_name: \"Slovenian\",\n    script: \"Latin\",\n  },\n  {\n    lang: \"sv\",\n    full_name: \"Swedish\",\n    script: \"Latin\",\n  },\n  {\n    lang: \"tr\",\n    full_name: \"Turkish\",\n    script: \"Latin\",\n  },\n  {\n    lang: \"uk\",\n    full_name: \"Ukrainian\",\n    script: \"Cyrillic\",\n  },\n  {\n    lang: \"ur\",\n    full_name: \"Urdu\",\n    script: \"Arabic\",\n  },\n  {\n    lang: \"vi\",\n    full_name: \"Vietnamese\",\n    script: \"Latin\",\n  },\n  {\n    lang: \"zh-Hans\",\n    full_name: \"Chinese (Simplified)\",\n    script: \"Han\",\n  },\n  {\n    lang: \"zh-Hant\",\n    full_name: \"Chinese (Traditional)\",\n    script: \"Han\",\n  },\n];\n", "import {\n  DataDrivenPropertyValueSpecification,\n  ExpressionSpecification,\n  LayerSpecification,\n} from \"@maplibre/maplibre-gl-style-spec\";\nimport { get_country_name, get_multiline_name } from \"./language\";\nimport { Theme } from \"./themes\";\n\nexport function nolabels_layers(\n  source: string,\n  t: Theme,\n): LayerSpecification[] {\n  return [\n    {\n      id: \"background\",\n      type: \"background\",\n      paint: {\n        \"background-color\": t.background,\n      },\n    },\n    {\n      id: \"earth\",\n      type: \"fill\",\n      filter: [\"==\", \"$type\", \"Polygon\"],\n      source: source,\n      \"source-layer\": \"earth\",\n      paint: {\n        \"fill-color\": t.earth,\n      },\n    },\n    ...((t.landcover\n      ? [\n          {\n            id: \"landcover\",\n            type: \"fill\",\n            source: source,\n            \"source-layer\": \"landcover\",\n            paint: {\n              \"fill-color\": [\n                \"match\",\n                [\"get\", \"kind\"],\n                \"grassland\",\n                t.landcover.grassland,\n                \"barren\",\n                t.landcover.barren,\n                \"urban_area\",\n                t.landcover.urban_area,\n                \"farmland\",\n                t.landcover.farmland,\n                \"glacier\",\n                t.landcover.glacier,\n                \"scrub\",\n                t.landcover.scrub,\n                t.landcover.forest,\n              ],\n              \"fill-opacity\": [\"interpolate\", [\"linear\"], [\"zoom\"], 5, 1, 7, 0],\n            },\n          },\n        ]\n      : []) as LayerSpecification[]),\n    {\n      id: \"landuse_park\",\n      type: \"fill\",\n      source: source,\n      \"source-layer\": \"landuse\",\n      filter: [\n        \"in\",\n        \"kind\",\n        \"national_park\",\n        \"park\",\n        \"cemetery\",\n        \"protected_area\",\n        \"nature_reserve\",\n        \"forest\",\n        \"golf_course\",\n        \"wood\",\n        \"nature_reserve\",\n        \"forest\",\n        \"scrub\",\n        \"grassland\",\n        \"grass\",\n        \"military\",\n        \"naval_base\",\n        \"airfield\",\n      ],\n      paint: {\n        \"fill-opacity\": [\"interpolate\", [\"linear\"], [\"zoom\"], 6, 0, 11, 1],\n        \"fill-color\": [\n          \"case\",\n          [\n            \"in\",\n            [\"get\", \"kind\"],\n            [\n              \"literal\",\n              [\n                \"national_park\",\n                \"park\",\n                \"cemetery\",\n                \"protected_area\",\n                \"nature_reserve\",\n                \"forest\",\n                \"golf_course\",\n              ],\n            ],\n          ],\n          t.park_b,\n          [\n            \"in\",\n            [\"get\", \"kind\"],\n            [\"literal\", [\"wood\", \"nature_reserve\", \"forest\"]],\n          ],\n          t.wood_b,\n          [\"in\", [\"get\", \"kind\"], [\"literal\", [\"scrub\", \"grassland\", \"grass\"]]],\n          t.scrub_b,\n          [\"in\", [\"get\", \"kind\"], [\"literal\", [\"glacier\"]]],\n          t.glacier,\n          [\"in\", [\"get\", \"kind\"], [\"literal\", [\"sand\"]]],\n          t.sand,\n          [\n            \"in\",\n            [\"get\", \"kind\"],\n            [\"literal\", [\"military\", \"naval_base\", \"airfield\"]],\n          ],\n          t.zoo,\n          t.earth,\n        ],\n      },\n    },\n    {\n      id: \"landuse_urban_green\",\n      type: \"fill\",\n      source: source,\n      \"source-layer\": \"landuse\",\n      filter: [\"in\", \"kind\", \"allotments\", \"village_green\", \"playground\"],\n      paint: {\n        \"fill-color\": t.park_b,\n        \"fill-opacity\": 0.7,\n      },\n    },\n    {\n      id: \"landuse_hospital\",\n      type: \"fill\",\n      source: source,\n      \"source-layer\": \"landuse\",\n      filter: [\"==\", \"kind\", \"hospital\"],\n      paint: {\n        \"fill-color\": t.hospital,\n      },\n    },\n    {\n      id: \"landuse_industrial\",\n      type: \"fill\",\n      source: source,\n      \"source-layer\": \"landuse\",\n      filter: [\"==\", \"kind\", \"industrial\"],\n      paint: {\n        \"fill-color\": t.industrial,\n      },\n    },\n    {\n      id: \"landuse_school\",\n      type: \"fill\",\n      source: source,\n      \"source-layer\": \"landuse\",\n      filter: [\"in\", \"kind\", \"school\", \"university\", \"college\"],\n      paint: {\n        \"fill-color\": t.school,\n      },\n    },\n    {\n      id: \"landuse_beach\",\n      type: \"fill\",\n      source: source,\n      \"source-layer\": \"landuse\",\n      filter: [\"in\", \"kind\", \"beach\"],\n      paint: {\n        \"fill-color\": t.beach,\n      },\n    },\n    {\n      id: \"landuse_zoo\",\n      type: \"fill\",\n      source: source,\n      \"source-layer\": \"landuse\",\n      filter: [\"in\", \"kind\", \"zoo\"],\n      paint: {\n        \"fill-color\": t.zoo,\n      },\n    },\n    {\n      id: \"landuse_aerodrome\",\n      type: \"fill\",\n      source: source,\n      \"source-layer\": \"landuse\",\n      filter: [\"in\", \"kind\", \"aerodrome\"],\n      paint: {\n        \"fill-color\": t.aerodrome,\n      },\n    },\n    {\n      id: \"roads_runway\",\n      type: \"line\",\n      source: source,\n      \"source-layer\": \"roads\",\n      filter: [\"==\", \"kind_detail\", \"runway\"],\n      paint: {\n        \"line-color\": t.runway,\n        \"line-width\": [\n          \"interpolate\",\n          [\"exponential\", 1.6],\n          [\"zoom\"],\n          10,\n          0,\n          12,\n          4,\n          18,\n          30,\n        ],\n      },\n    },\n    {\n      id: \"roads_taxiway\",\n      type: \"line\",\n      source: source,\n      \"source-layer\": \"roads\",\n      minzoom: 13,\n      filter: [\"==\", \"kind_detail\", \"taxiway\"],\n      paint: {\n        \"line-color\": t.runway,\n        \"line-width\": [\n          \"interpolate\",\n          [\"exponential\", 1.6],\n          [\"zoom\"],\n          13,\n          0,\n          13.5,\n          1,\n          15,\n          6,\n        ],\n      },\n    },\n    {\n      id: \"landuse_runway\",\n      type: \"fill\",\n      source: source,\n      \"source-layer\": \"landuse\",\n      filter: [\"any\", [\"in\", \"kind\", \"runway\", \"taxiway\"]],\n      paint: {\n        \"fill-color\": t.runway,\n      },\n    },\n    {\n      id: \"water\",\n      type: \"fill\",\n      filter: [\"==\", \"$type\", \"Polygon\"],\n      source: source,\n      \"source-layer\": \"water\",\n      paint: {\n        \"fill-color\": t.water,\n      },\n    },\n    {\n      id: \"water_stream\",\n      type: \"line\",\n      source: source,\n      \"source-layer\": \"water\",\n      minzoom: 14,\n      filter: [\"in\", \"kind\", \"stream\"],\n      paint: {\n        \"line-color\": t.water,\n        \"line-width\": 0.5,\n      },\n    },\n    {\n      id: \"water_river\",\n      type: \"line\",\n      source: source,\n      \"source-layer\": \"water\",\n      minzoom: 9,\n      filter: [\"in\", \"kind\", \"river\"],\n      paint: {\n        \"line-color\": t.water,\n        \"line-width\": [\n          \"interpolate\",\n          [\"exponential\", 1.6],\n          [\"zoom\"],\n          9,\n          0,\n          9.5,\n          1.0,\n          18,\n          12,\n        ],\n      },\n    },\n    {\n      id: \"landuse_pedestrian\",\n      type: \"fill\",\n      source: source,\n      \"source-layer\": \"landuse\",\n      filter: [\"==\", \"kind\", \"pedestrian\"],\n      paint: {\n        \"fill-color\": t.pedestrian,\n      },\n    },\n    {\n      id: \"landuse_pier\",\n      type: \"fill\",\n      source: source,\n      \"source-layer\": \"landuse\",\n      filter: [\"==\", \"kind\", \"pier\"],\n      paint: {\n        \"fill-color\": t.pier,\n      },\n    },\n    {\n      id: \"roads_tunnels_other_casing\",\n      type: \"line\",\n      source: source,\n      \"source-layer\": \"roads\",\n      filter: [\"all\", [\"has\", \"is_tunnel\"], [\"in\", \"kind\", \"other\", \"path\"]],\n      paint: {\n        \"line-color\": t.tunnel_other_casing,\n        \"line-gap-width\": [\n          \"interpolate\",\n          [\"exponential\", 1.6],\n          [\"zoom\"],\n          14,\n          0,\n          20,\n          7,\n        ],\n      },\n    },\n    {\n      id: \"roads_tunnels_minor_casing\",\n      type: \"line\",\n      source: source,\n      \"source-layer\": \"roads\",\n      filter: [\"all\", [\"has\", \"is_tunnel\"], [\"==\", \"kind\", \"minor_road\"]],\n      paint: {\n        \"line-color\": t.tunnel_minor_casing,\n        \"line-dasharray\": [3, 2],\n        \"line-gap-width\": [\n          \"interpolate\",\n          [\"exponential\", 1.6],\n          [\"zoom\"],\n          11,\n          0,\n          12.5,\n          0.5,\n          15,\n          2,\n          18,\n          11,\n        ],\n        \"line-width\": [\n          \"interpolate\",\n          [\"exponential\", 1.6],\n          [\"zoom\"],\n          12,\n          0,\n          12.5,\n          1,\n        ],\n      },\n    },\n    {\n      id: \"roads_tunnels_link_casing\",\n      type: \"line\",\n      source: source,\n      \"source-layer\": \"roads\",\n      filter: [\"all\", [\"has\", \"is_tunnel\"], [\"has\", \"is_link\"]],\n      paint: {\n        \"line-color\": t.tunnel_link_casing,\n        \"line-dasharray\": [3, 2],\n        \"line-gap-width\": [\n          \"interpolate\",\n          [\"exponential\", 1.6],\n          [\"zoom\"],\n          13,\n          0,\n          13.5,\n          1,\n          18,\n          11,\n        ],\n        \"line-width\": [\n          \"interpolate\",\n          [\"exponential\", 1.6],\n          [\"zoom\"],\n          12,\n          0,\n          12.5,\n          1,\n        ],\n      },\n    },\n    {\n      id: \"roads_tunnels_major_casing\",\n      type: \"line\",\n      source: source,\n      \"source-layer\": \"roads\",\n      filter: [\n        \"all\",\n        [\"!has\", \"is_tunnel\"],\n        [\"!has\", \"is_bridge\"],\n        [\"==\", \"kind\", \"major_road\"],\n      ],\n      paint: {\n        \"line-color\": t.tunnel_major_casing,\n        \"line-dasharray\": [3, 2],\n        \"line-gap-width\": [\n          \"interpolate\",\n          [\"exponential\", 1.6],\n          [\"zoom\"],\n          7,\n          0,\n          7.5,\n          0.5,\n          18,\n          13,\n        ],\n        \"line-width\": [\n          \"interpolate\",\n          [\"exponential\", 1.6],\n          [\"zoom\"],\n          9,\n          0,\n          9.5,\n          1,\n        ],\n      },\n    },\n    {\n      id: \"roads_tunnels_highway_casing\",\n      type: \"line\",\n      source: source,\n      \"source-layer\": \"roads\",\n      filter: [\n        \"all\",\n        [\"!has\", \"is_tunnel\"],\n        [\"!has\", \"is_bridge\"],\n        [\"==\", \"kind\", \"highway\"],\n        [\"!has\", \"is_link\"],\n      ],\n      paint: {\n        \"line-color\": t.tunnel_highway_casing,\n        \"line-dasharray\": [6, 0.5],\n        \"line-gap-width\": [\n          \"interpolate\",\n          [\"exponential\", 1.6],\n          [\"zoom\"],\n          3,\n          0,\n          3.5,\n          0.5,\n          18,\n          15,\n        ],\n        \"line-width\": [\n          \"interpolate\",\n          [\"exponential\", 1.6],\n          [\"zoom\"],\n          7,\n          0,\n          7.5,\n          1,\n          20,\n          15,\n        ],\n      },\n    },\n    {\n      id: \"roads_tunnels_other\",\n      type: \"line\",\n      source: source,\n      \"source-layer\": \"roads\",\n      filter: [\"all\", [\"has\", \"is_tunnel\"], [\"in\", \"kind\", \"other\", \"path\"]],\n      paint: {\n        \"line-color\": t.tunnel_other,\n        \"line-dasharray\": [4.5, 0.5],\n        \"line-width\": [\n          \"interpolate\",\n          [\"exponential\", 1.6],\n          [\"zoom\"],\n          14,\n          0,\n          20,\n          7,\n        ],\n      },\n    },\n    {\n      id: \"roads_tunnels_minor\",\n      type: \"line\",\n      source: source,\n      \"source-layer\": \"roads\",\n      filter: [\"all\", [\"has\", \"is_tunnel\"], [\"==\", \"kind\", \"minor_road\"]],\n      paint: {\n        \"line-color\": t.tunnel_minor,\n        \"line-width\": [\n          \"interpolate\",\n          [\"exponential\", 1.6],\n          [\"zoom\"],\n          11,\n          0,\n          12.5,\n          0.5,\n          15,\n          2,\n          18,\n          11,\n        ],\n      },\n    },\n    {\n      id: \"roads_tunnels_link\",\n      type: \"line\",\n      source: source,\n      \"source-layer\": \"roads\",\n      filter: [\"all\", [\"has\", \"is_tunnel\"], [\"has\", \"is_link\"]],\n      paint: {\n        \"line-color\": t.tunnel_minor,\n        \"line-width\": [\n          \"interpolate\",\n          [\"exponential\", 1.6],\n          [\"zoom\"],\n          13,\n          0,\n          13.5,\n          1,\n          18,\n          11,\n        ],\n      },\n    },\n    {\n      id: \"roads_tunnels_major\",\n      type: \"line\",\n      source: source,\n      \"source-layer\": \"roads\",\n      filter: [\"all\", [\"has\", \"is_tunnel\"], [\"==\", \"kind\", \"major_road\"]],\n      paint: {\n        \"line-color\": t.tunnel_major,\n        \"line-width\": [\n          \"interpolate\",\n          [\"exponential\", 1.6],\n          [\"zoom\"],\n          6,\n          0,\n          12,\n          1.6,\n          15,\n          3,\n          18,\n          13,\n        ],\n      },\n    },\n    {\n      id: \"roads_tunnels_highway\",\n      type: \"line\",\n      source: source,\n      \"source-layer\": \"roads\",\n      filter: [\n        \"all\",\n        [\"has\", \"is_tunnel\"],\n        [\"==\", [\"get\", \"kind\"], \"highway\"],\n        [\"!\", [\"has\", \"is_link\"]],\n      ],\n      paint: {\n        \"line-color\": t.tunnel_highway,\n        \"line-width\": [\n          \"interpolate\",\n          [\"exponential\", 1.6],\n          [\"zoom\"],\n          3,\n          0,\n          6,\n          1.1,\n          12,\n          1.6,\n          15,\n          5,\n          18,\n          15,\n        ],\n      },\n    },\n    {\n      id: \"buildings\",\n      type: \"fill\",\n      source: source,\n      \"source-layer\": \"buildings\",\n      paint: {\n        \"fill-color\": t.buildings,\n        \"fill-opacity\": 0.5,\n      },\n    },\n    {\n      id: \"roads_pier\",\n      type: \"line\",\n      source: source,\n      \"source-layer\": \"roads\",\n      filter: [\"==\", \"kind_detail\", \"pier\"],\n      paint: {\n        \"line-color\": t.pier,\n        \"line-width\": [\n          \"interpolate\",\n          [\"exponential\", 1.6],\n          [\"zoom\"],\n          12,\n          0,\n          12.5,\n          0.5,\n          20,\n          16,\n        ],\n      },\n    },\n    {\n      id: \"roads_minor_service_casing\",\n      type: \"line\",\n      source: source,\n      \"source-layer\": \"roads\",\n      minzoom: 13,\n      filter: [\n        \"all\",\n        [\"!has\", \"is_tunnel\"],\n        [\"!has\", \"is_bridge\"],\n        [\"==\", \"kind\", \"minor_road\"],\n        [\"==\", \"kind_detail\", \"service\"],\n      ],\n      paint: {\n        \"line-color\": t.minor_service_casing,\n        \"line-gap-width\": [\n          \"interpolate\",\n          [\"exponential\", 1.6],\n          [\"zoom\"],\n          13,\n          0,\n          18,\n          8,\n        ],\n        \"line-width\": [\n          \"interpolate\",\n          [\"exponential\", 1.6],\n          [\"zoom\"],\n          13,\n          0,\n          13.5,\n          0.8,\n        ],\n      },\n    },\n    {\n      id: \"roads_minor_casing\",\n      type: \"line\",\n      source: source,\n      \"source-layer\": \"roads\",\n      filter: [\n        \"all\",\n        [\"!has\", \"is_tunnel\"],\n        [\"!has\", \"is_bridge\"],\n        [\"==\", \"kind\", \"minor_road\"],\n        [\"!=\", \"kind_detail\", \"service\"],\n      ],\n      paint: {\n        \"line-color\": t.minor_casing,\n        \"line-gap-width\": [\n          \"interpolate\",\n          [\"exponential\", 1.6],\n          [\"zoom\"],\n          11,\n          0,\n          12.5,\n          0.5,\n          15,\n          2,\n          18,\n          11,\n        ],\n        \"line-width\": [\n          \"interpolate\",\n          [\"exponential\", 1.6],\n          [\"zoom\"],\n          12,\n          0,\n          12.5,\n          1,\n        ],\n      },\n    },\n    {\n      id: \"roads_link_casing\",\n      type: \"line\",\n      source: source,\n      \"source-layer\": \"roads\",\n      minzoom: 13,\n      filter: [\"has\", \"is_link\"],\n      paint: {\n        \"line-color\": t.minor_casing,\n        \"line-gap-width\": [\n          \"interpolate\",\n          [\"exponential\", 1.6],\n          [\"zoom\"],\n          13,\n          0,\n          13.5,\n          1,\n          18,\n          11,\n        ],\n        \"line-width\": [\n          \"interpolate\",\n          [\"exponential\", 1.6],\n          [\"zoom\"],\n          13,\n          0,\n          13.5,\n          1.5,\n        ],\n      },\n    },\n    {\n      id: \"roads_major_casing_late\",\n      type: \"line\",\n      source: source,\n      \"source-layer\": \"roads\",\n      minzoom: 12,\n      filter: [\n        \"all\",\n        [\"!has\", \"is_tunnel\"],\n        [\"!has\", \"is_bridge\"],\n        [\"==\", \"kind\", \"major_road\"],\n      ],\n      paint: {\n        \"line-color\": t.major_casing_late,\n        \"line-gap-width\": [\n          \"interpolate\",\n          [\"exponential\", 1.6],\n          [\"zoom\"],\n          6,\n          0,\n          12,\n          1.6,\n          15,\n          3,\n          18,\n          13,\n        ],\n        \"line-width\": [\n          \"interpolate\",\n          [\"exponential\", 1.6],\n          [\"zoom\"],\n          9,\n          0,\n          9.5,\n          1,\n        ],\n      },\n    },\n    {\n      id: \"roads_highway_casing_late\",\n      type: \"line\",\n      source: source,\n      \"source-layer\": \"roads\",\n      minzoom: 12,\n      filter: [\n        \"all\",\n        [\"!has\", \"is_tunnel\"],\n        [\"!has\", \"is_bridge\"],\n        [\"==\", \"kind\", \"highway\"],\n        [\"!has\", \"is_link\"],\n      ],\n      paint: {\n        \"line-color\": t.highway_casing_late,\n        \"line-gap-width\": [\n          \"interpolate\",\n          [\"exponential\", 1.6],\n          [\"zoom\"],\n          3,\n          0,\n          3.5,\n          0.5,\n          18,\n          15,\n        ],\n        \"line-width\": [\n          \"interpolate\",\n          [\"exponential\", 1.6],\n          [\"zoom\"],\n          7,\n          0,\n          7.5,\n          1,\n          20,\n          15,\n        ],\n      },\n    },\n    {\n      id: \"roads_other\",\n      type: \"line\",\n      source: source,\n      \"source-layer\": \"roads\",\n      filter: [\n        \"all\",\n        [\"!has\", \"is_tunnel\"],\n        [\"!has\", \"is_bridge\"],\n        [\"in\", \"kind\", \"other\", \"path\"],\n        [\"!=\", \"kind_detail\", \"pier\"],\n      ],\n      paint: {\n        \"line-color\": t.other,\n        \"line-dasharray\": [3, 1],\n        \"line-width\": [\n          \"interpolate\",\n          [\"exponential\", 1.6],\n          [\"zoom\"],\n          14,\n          0,\n          20,\n          7,\n        ],\n      },\n    },\n    {\n      id: \"roads_link\",\n      type: \"line\",\n      source: source,\n      \"source-layer\": \"roads\",\n      filter: [\"has\", \"is_link\"],\n      paint: {\n        \"line-color\": t.link,\n        \"line-width\": [\n          \"interpolate\",\n          [\"exponential\", 1.6],\n          [\"zoom\"],\n          13,\n          0,\n          13.5,\n          1,\n          18,\n          11,\n        ],\n      },\n    },\n    {\n      id: \"roads_minor_service\",\n      type: \"line\",\n      source: source,\n      \"source-layer\": \"roads\",\n      filter: [\n        \"all\",\n        [\"!has\", \"is_tunnel\"],\n        [\"!has\", \"is_bridge\"],\n        [\"==\", \"kind\", \"minor_road\"],\n        [\"==\", \"kind_detail\", \"service\"],\n      ],\n      paint: {\n        \"line-color\": t.minor_service,\n        \"line-width\": [\n          \"interpolate\",\n          [\"exponential\", 1.6],\n          [\"zoom\"],\n          13,\n          0,\n          18,\n          8,\n        ],\n      },\n    },\n    {\n      id: \"roads_minor\",\n      type: \"line\",\n      source: source,\n      \"source-layer\": \"roads\",\n      filter: [\n        \"all\",\n        [\"!has\", \"is_tunnel\"],\n        [\"!has\", \"is_bridge\"],\n        [\"==\", \"kind\", \"minor_road\"],\n        [\"!=\", \"kind_detail\", \"service\"],\n      ],\n      paint: {\n        \"line-color\": [\n          \"interpolate\",\n          [\"exponential\", 1.6],\n          [\"zoom\"],\n          11,\n          t.minor_a,\n          16,\n          t.minor_b,\n        ],\n        \"line-width\": [\n          \"interpolate\",\n          [\"exponential\", 1.6],\n          [\"zoom\"],\n          11,\n          0,\n          12.5,\n          0.5,\n          15,\n          2,\n          18,\n          11,\n        ],\n      },\n    },\n    {\n      id: \"roads_major_casing_early\",\n      type: \"line\",\n      source: source,\n      \"source-layer\": \"roads\",\n      maxzoom: 12,\n      filter: [\n        \"all\",\n        [\"!has\", \"is_tunnel\"],\n        [\"!has\", \"is_bridge\"],\n        [\"==\", \"kind\", \"major_road\"],\n      ],\n      paint: {\n        \"line-color\": t.major_casing_early,\n        \"line-gap-width\": [\n          \"interpolate\",\n          [\"exponential\", 1.6],\n          [\"zoom\"],\n          7,\n          0,\n          7.5,\n          0.5,\n          18,\n          13,\n        ],\n        \"line-width\": [\n          \"interpolate\",\n          [\"exponential\", 1.6],\n          [\"zoom\"],\n          9,\n          0,\n          9.5,\n          1,\n        ],\n      },\n    },\n    {\n      id: \"roads_major\",\n      type: \"line\",\n      source: source,\n      \"source-layer\": \"roads\",\n      filter: [\n        \"all\",\n        [\"!has\", \"is_tunnel\"],\n        [\"!has\", \"is_bridge\"],\n        [\"==\", \"kind\", \"major_road\"],\n      ],\n      paint: {\n        \"line-color\": t.major,\n        \"line-width\": [\n          \"interpolate\",\n          [\"exponential\", 1.6],\n          [\"zoom\"],\n          6,\n          0,\n          12,\n          1.6,\n          15,\n          3,\n          18,\n          13,\n        ],\n      },\n    },\n    {\n      id: \"roads_highway_casing_early\",\n      type: \"line\",\n      source: source,\n      \"source-layer\": \"roads\",\n      maxzoom: 12,\n      filter: [\n        \"all\",\n        [\"!has\", \"is_tunnel\"],\n        [\"!has\", \"is_bridge\"],\n        [\"==\", \"kind\", \"highway\"],\n        [\"!has\", \"is_link\"],\n      ],\n      paint: {\n        \"line-color\": t.highway_casing_early,\n        \"line-gap-width\": [\n          \"interpolate\",\n          [\"exponential\", 1.6],\n          [\"zoom\"],\n          3,\n          0,\n          3.5,\n          0.5,\n          18,\n          15,\n        ],\n        \"line-width\": [\n          \"interpolate\",\n          [\"exponential\", 1.6],\n          [\"zoom\"],\n          7,\n          0,\n          7.5,\n          1,\n        ],\n      },\n    },\n    {\n      id: \"roads_highway\",\n      type: \"line\",\n      source: source,\n      \"source-layer\": \"roads\",\n      filter: [\n        \"all\",\n        [\"!has\", \"is_tunnel\"],\n        [\"!has\", \"is_bridge\"],\n        [\"==\", \"kind\", \"highway\"],\n        [\"!has\", \"is_link\"],\n      ],\n      paint: {\n        \"line-color\": t.highway,\n        \"line-width\": [\n          \"interpolate\",\n          [\"exponential\", 1.6],\n          [\"zoom\"],\n          3,\n          0,\n          6,\n          1.1,\n          12,\n          1.6,\n          15,\n          5,\n          18,\n          15,\n        ],\n      },\n    },\n    {\n      id: \"roads_rail\",\n      type: \"line\",\n      source: source,\n      \"source-layer\": \"roads\",\n      filter: [\"==\", \"kind\", \"rail\"],\n      paint: {\n        \"line-dasharray\": [0.3, 0.75],\n        \"line-opacity\": 0.5,\n        \"line-color\": t.railway,\n        \"line-width\": [\n          \"interpolate\",\n          [\"exponential\", 1.6],\n          [\"zoom\"],\n          3,\n          0,\n          6,\n          0.15,\n          18,\n          9,\n        ],\n      },\n    },\n    {\n      id: \"boundaries_country\",\n      type: \"line\",\n      source: source,\n      \"source-layer\": \"boundaries\",\n      filter: [\"<=\", \"kind_detail\", 2],\n      paint: {\n        \"line-color\": t.boundaries,\n        \"line-width\": 1,\n        \"line-dasharray\": [3, 2],\n      },\n    },\n    {\n      id: \"boundaries\",\n      type: \"line\",\n      source: source,\n      \"source-layer\": \"boundaries\",\n      filter: [\">\", \"kind_detail\", 2],\n      paint: {\n        \"line-color\": t.boundaries,\n        \"line-width\": 0.5,\n        \"line-dasharray\": [3, 2],\n      },\n    },\n    {\n      id: \"roads_bridges_other_casing\",\n      type: \"line\",\n      source: source,\n      \"source-layer\": \"roads\",\n      minzoom: 12,\n      filter: [\"all\", [\"has\", \"is_bridge\"], [\"in\", \"kind\", \"other\", \"path\"]],\n      paint: {\n        \"line-color\": t.bridges_other_casing,\n        \"line-gap-width\": [\n          \"interpolate\",\n          [\"exponential\", 1.6],\n          [\"zoom\"],\n          14,\n          0,\n          20,\n          7,\n        ],\n      },\n    },\n    {\n      id: \"roads_bridges_link_casing\",\n      type: \"line\",\n      source: source,\n      \"source-layer\": \"roads\",\n      minzoom: 12,\n      filter: [\"all\", [\"has\", \"is_bridge\"], [\"has\", \"is_link\"]],\n      paint: {\n        \"line-color\": t.bridges_minor_casing,\n        \"line-gap-width\": [\n          \"interpolate\",\n          [\"exponential\", 1.6],\n          [\"zoom\"],\n          13,\n          0,\n          13.5,\n          1,\n          18,\n          11,\n        ],\n        \"line-width\": [\n          \"interpolate\",\n          [\"exponential\", 1.6],\n          [\"zoom\"],\n          12,\n          0,\n          12.5,\n          1.5,\n        ],\n      },\n    },\n    {\n      id: \"roads_bridges_minor_casing\",\n      type: \"line\",\n      source: source,\n      \"source-layer\": \"roads\",\n      minzoom: 12,\n      filter: [\"all\", [\"has\", \"is_bridge\"], [\"==\", \"kind\", \"minor_road\"]],\n      paint: {\n        \"line-color\": t.bridges_minor_casing,\n        \"line-gap-width\": [\n          \"interpolate\",\n          [\"exponential\", 1.6],\n          [\"zoom\"],\n          11,\n          0,\n          12.5,\n          0.5,\n          15,\n          2,\n          18,\n          11,\n        ],\n        \"line-width\": [\n          \"interpolate\",\n          [\"exponential\", 1.6],\n          [\"zoom\"],\n          13,\n          0,\n          13.5,\n          0.8,\n        ],\n      },\n    },\n    {\n      id: \"roads_bridges_major_casing\",\n      type: \"line\",\n      source: source,\n      \"source-layer\": \"roads\",\n      minzoom: 12,\n      filter: [\"all\", [\"has\", \"is_bridge\"], [\"==\", \"kind\", \"major_road\"]],\n      paint: {\n        \"line-color\": t.bridges_major_casing,\n        \"line-gap-width\": [\n          \"interpolate\",\n          [\"exponential\", 1.6],\n          [\"zoom\"],\n          7,\n          0,\n          7.5,\n          0.5,\n          18,\n          10,\n        ],\n        \"line-width\": [\n          \"interpolate\",\n          [\"exponential\", 1.6],\n          [\"zoom\"],\n          9,\n          0,\n          9.5,\n          1.5,\n        ],\n      },\n    },\n    {\n      id: \"roads_bridges_other\",\n      type: \"line\",\n      source: source,\n      \"source-layer\": \"roads\",\n      minzoom: 12,\n      filter: [\"all\", [\"has\", \"is_bridge\"], [\"in\", \"kind\", \"other\", \"path\"]],\n      paint: {\n        \"line-color\": t.bridges_other,\n        \"line-dasharray\": [2, 1],\n        \"line-width\": [\n          \"interpolate\",\n          [\"exponential\", 1.6],\n          [\"zoom\"],\n          14,\n          0,\n          20,\n          7,\n        ],\n      },\n    },\n    {\n      id: \"roads_bridges_minor\",\n      type: \"line\",\n      source: source,\n      \"source-layer\": \"roads\",\n      minzoom: 12,\n      filter: [\"all\", [\"has\", \"is_bridge\"], [\"==\", \"kind\", \"minor_road\"]],\n      paint: {\n        \"line-color\": t.bridges_minor,\n        \"line-width\": [\n          \"interpolate\",\n          [\"exponential\", 1.6],\n          [\"zoom\"],\n          11,\n          0,\n          12.5,\n          0.5,\n          15,\n          2,\n          18,\n          11,\n        ],\n      },\n    },\n    {\n      id: \"roads_bridges_link\",\n      type: \"line\",\n      source: source,\n      \"source-layer\": \"roads\",\n      minzoom: 12,\n      filter: [\"all\", [\"has\", \"is_bridge\"], [\"has\", \"is_link\"]],\n      paint: {\n        \"line-color\": t.bridges_minor,\n        \"line-width\": [\n          \"interpolate\",\n          [\"exponential\", 1.6],\n          [\"zoom\"],\n          13,\n          0,\n          13.5,\n          1,\n          18,\n          11,\n        ],\n      },\n    },\n    {\n      id: \"roads_bridges_major\",\n      type: \"line\",\n      source: source,\n      \"source-layer\": \"roads\",\n      minzoom: 12,\n      filter: [\"all\", [\"has\", \"is_bridge\"], [\"==\", \"kind\", \"major_road\"]],\n      paint: {\n        \"line-color\": t.bridges_major,\n        \"line-width\": [\n          \"interpolate\",\n          [\"exponential\", 1.6],\n          [\"zoom\"],\n          6,\n          0,\n          12,\n          1.6,\n          15,\n          3,\n          18,\n          13,\n        ],\n      },\n    },\n    {\n      id: \"roads_bridges_highway_casing\",\n      type: \"line\",\n      source: source,\n      \"source-layer\": \"roads\",\n      minzoom: 12,\n      filter: [\n        \"all\",\n        [\"has\", \"is_bridge\"],\n        [\"==\", \"kind\", \"highway\"],\n        [\"!has\", \"is_link\"],\n      ],\n      paint: {\n        \"line-color\": t.bridges_highway_casing,\n        \"line-gap-width\": [\n          \"interpolate\",\n          [\"exponential\", 1.6],\n          [\"zoom\"],\n          3,\n          0,\n          3.5,\n          0.5,\n          18,\n          15,\n        ],\n        \"line-width\": [\n          \"interpolate\",\n          [\"exponential\", 1.6],\n          [\"zoom\"],\n          7,\n          0,\n          7.5,\n          1,\n          20,\n          15,\n        ],\n      },\n    },\n    {\n      id: \"roads_bridges_highway\",\n      type: \"line\",\n      source: source,\n      \"source-layer\": \"roads\",\n      filter: [\n        \"all\",\n        [\"has\", \"is_bridge\"],\n        [\"==\", \"kind\", \"highway\"],\n        [\"!has\", \"is_link\"],\n      ],\n      paint: {\n        \"line-color\": t.bridges_highway,\n        \"line-width\": [\n          \"interpolate\",\n          [\"exponential\", 1.6],\n          [\"zoom\"],\n          3,\n          0,\n          6,\n          1.1,\n          12,\n          1.6,\n          15,\n          5,\n          18,\n          15,\n        ],\n      },\n    },\n  ];\n}\n\nexport function labels_layers(\n  source: string,\n  t: Theme,\n  lang: string,\n  script?: string,\n): LayerSpecification[] {\n  return [\n    {\n      id: \"water_waterway_label\",\n      type: \"symbol\",\n      source: source,\n      \"source-layer\": \"water\",\n      minzoom: 13,\n      filter: [\"in\", \"kind\", \"river\", \"stream\"],\n      layout: {\n        \"symbol-placement\": \"line\",\n        \"text-font\": [t.italic || \"Noto Sans Italic\"],\n        \"text-field\": get_multiline_name(\n          lang,\n          script,\n        ) as DataDrivenPropertyValueSpecification<string>,\n        \"text-size\": 12,\n        \"text-letter-spacing\": 0.2,\n      },\n      paint: {\n        \"text-color\": t.ocean_label,\n      },\n    },\n    {\n      id: \"roads_labels_minor\",\n      type: \"symbol\",\n      source: source,\n      \"source-layer\": \"roads\",\n      minzoom: 15,\n      filter: [\"in\", \"kind\", \"minor_road\", \"other\", \"path\"],\n      layout: {\n        \"symbol-sort-key\": [\"get\", \"min_zoom\"],\n        \"symbol-placement\": \"line\",\n        \"text-font\": [t.regular || \"Noto Sans Regular\"],\n        \"text-field\": get_multiline_name(\n          lang,\n          script,\n        ) as DataDrivenPropertyValueSpecification<string>,\n        \"text-size\": 12,\n      },\n      paint: {\n        \"text-color\": t.roads_label_minor,\n        \"text-halo-color\": t.roads_label_minor_halo,\n        \"text-halo-width\": 1,\n        \"text-halo-blur\": 1,\n      },\n    },\n    {\n      id: \"water_label_ocean\",\n      type: \"symbol\",\n      source: source,\n      \"source-layer\": \"water\",\n      filter: [\n        \"in\",\n        \"kind\",\n        \"sea\",\n        \"ocean\",\n        \"lake\",\n        \"water\",\n        \"bay\",\n        \"strait\",\n        \"fjord\",\n      ],\n      layout: {\n        \"text-font\": [t.italic || \"Noto Sans Italic\"],\n        \"text-field\": get_multiline_name(\n          lang,\n          script,\n          t.regular,\n        ) as DataDrivenPropertyValueSpecification<string>,\n        \"text-size\": [\"interpolate\", [\"linear\"], [\"zoom\"], 3, 10, 10, 12],\n        \"text-letter-spacing\": 0.1,\n        \"text-max-width\": 9,\n        \"text-transform\": \"uppercase\",\n      },\n      paint: {\n        \"text-color\": t.ocean_label,\n      },\n    },\n    {\n      id: \"water_label_lakes\",\n      type: \"symbol\",\n      source: source,\n      \"source-layer\": \"water\",\n      filter: [\"in\", \"kind\", \"lake\", \"water\"],\n      layout: {\n        \"text-font\": [t.italic || \"Noto Sans Italic\"],\n        \"text-field\": get_multiline_name(\n          lang,\n          script,\n          t.regular,\n        ) as DataDrivenPropertyValueSpecification<string>,\n        \"text-size\": [\"interpolate\", [\"linear\"], [\"zoom\"], 3, 0, 6, 12, 10, 12],\n        \"text-letter-spacing\": 0.1,\n        \"text-max-width\": 9,\n      },\n      paint: {\n        \"text-color\": t.ocean_label,\n      },\n    },\n    {\n      id: \"roads_labels_major\",\n      type: \"symbol\",\n      source: source,\n      \"source-layer\": \"roads\",\n      minzoom: 11,\n      filter: [\"in\", \"kind\", \"highway\", \"major_road\"],\n      layout: {\n        \"symbol-sort-key\": [\"get\", \"min_zoom\"],\n        \"symbol-placement\": \"line\",\n        \"text-font\": [t.regular || \"Noto Sans Regular\"],\n        \"text-field\": get_multiline_name(\n          lang,\n          script,\n          t.regular,\n        ) as DataDrivenPropertyValueSpecification<string>,\n        \"text-size\": 12,\n      },\n      paint: {\n        \"text-color\": t.roads_label_major,\n        \"text-halo-color\": t.roads_label_major_halo,\n        \"text-halo-width\": 1,\n        \"text-halo-blur\": 1,\n      },\n    },\n    ...((t.pois\n      ? [\n          {\n            id: \"pois\",\n            type: \"symbol\",\n            source: source,\n            \"source-layer\": \"pois\",\n            filter: [\n              \"all\",\n              [\n                \"in\",\n                [\"get\", \"kind\"],\n                [\n                  \"literal\",\n                  [\n                    \"beach\",\n                    \"forest\",\n                    \"marina\",\n                    \"park\",\n                    \"peak\",\n                    \"zoo\",\n                    \"garden\",\n                    \"bench\",\n                    \"aerodrome\",\n                    \"station\",\n                    \"bus_stop\",\n                    \"ferry_terminal\",\n                    \"stadium\",\n                    \"university\",\n                    \"library\",\n                    \"school\",\n                    \"animal\",\n                    \"toilets\",\n                    \"drinking_water\",\n                  ],\n                ],\n              ],\n              [\">=\", [\"zoom\"], [\"+\", [\"get\", \"min_zoom\"], 0]],\n            ],\n            layout: {\n              \"icon-image\": [\n                \"match\",\n                [\"get\", \"kind\"],\n                \"station\",\n                \"train_station\",\n                [\"get\", \"kind\"],\n              ],\n              \"text-font\": [t.regular || \"Noto Sans Regular\"],\n              \"text-justify\": \"auto\",\n              \"text-field\": get_multiline_name(\n                lang,\n                script,\n                t.regular,\n              ) as DataDrivenPropertyValueSpecification<string>,\n              \"text-size\": [\n                \"interpolate\",\n                [\"linear\"],\n                [\"zoom\"],\n                17,\n                10,\n                19,\n                16,\n              ],\n              \"text-max-width\": 8,\n              \"text-offset\": [1.1, 0],\n              \"text-variable-anchor\": [\"left\", \"right\"],\n            },\n            paint: {\n              \"text-color\": [\n                \"case\",\n                [\n                  \"in\",\n                  [\"get\", \"kind\"],\n                  [\n                    \"literal\",\n                    [\n                      \"beach\",\n                      \"forest\",\n                      \"marina\",\n                      \"park\",\n                      \"peak\",\n                      \"zoo\",\n                      \"garden\",\n                      \"bench\",\n                    ],\n                  ],\n                ],\n                t.pois.green,\n                [\n                  \"in\",\n                  [\"get\", \"kind\"],\n                  [\n                    \"literal\",\n                    [\"aerodrome\", \"station\", \"bus_stop\", \"ferry_terminal\"],\n                  ],\n                ],\n                t.pois.lapis,\n                [\n                  \"in\",\n                  [\"get\", \"kind\"],\n                  [\n                    \"literal\",\n                    [\n                      \"stadium\",\n                      \"university\",\n                      \"library\",\n                      \"school\",\n                      \"animal\",\n                      \"toilets\",\n                      \"drinking_water\",\n                    ],\n                  ],\n                ],\n                t.pois.slategray,\n                t.earth,\n              ],\n            },\n          },\n        ]\n      : []) as LayerSpecification[]),\n    {\n      id: \"places_subplace\",\n      type: \"symbol\",\n      source: source,\n      \"source-layer\": \"places\",\n      filter: [\"==\", \"kind\", \"neighbourhood\"],\n      layout: {\n        \"symbol-sort-key\": [\"get\", \"min_zoom\"],\n        \"text-field\": get_multiline_name(\n          lang,\n          script,\n          t.regular,\n        ) as DataDrivenPropertyValueSpecification<string>,\n        \"text-font\": [t.regular || \"Noto Sans Regular\"],\n        \"text-max-width\": 7,\n        \"text-letter-spacing\": 0.1,\n        \"text-padding\": [\n          \"interpolate\",\n          [\"linear\"],\n          [\"zoom\"],\n          5,\n          2,\n          8,\n          4,\n          12,\n          18,\n          15,\n          20,\n        ],\n        \"text-size\": [\n          \"interpolate\",\n          [\"exponential\", 1.2],\n          [\"zoom\"],\n          11,\n          8,\n          14,\n          14,\n          18,\n          24,\n        ],\n        \"text-transform\": \"uppercase\",\n      },\n      paint: {\n        \"text-color\": t.subplace_label,\n        \"text-halo-color\": t.subplace_label_halo,\n        \"text-halo-width\": 1,\n        \"text-halo-blur\": 1,\n      },\n    },\n    {\n      id: \"places_locality\",\n      type: \"symbol\",\n      source: source,\n      \"source-layer\": \"places\",\n      filter: [\"==\", \"kind\", \"locality\"],\n      layout: {\n        \"icon-image\": [\"step\", [\"zoom\"], \"townspot\", 8, \"\"],\n        \"icon-size\": 0.7,\n        \"text-field\": get_multiline_name(\n          lang,\n          script,\n          t.regular,\n        ) as DataDrivenPropertyValueSpecification<string>,\n        \"text-font\": [\n          \"case\",\n          [\"<=\", [\"get\", \"min_zoom\"], 5],\n          [\"literal\", [t.bold || \"Noto Sans Medium\"]],\n          [\"literal\", [t.regular || \"Noto Sans Regular\"]],\n        ],\n        \"text-padding\": [\n          \"interpolate\",\n          [\"linear\"],\n          [\"zoom\"],\n          5,\n          3,\n          8,\n          7,\n          12,\n          11,\n        ],\n        \"text-size\": [\n          \"interpolate\",\n          [\"linear\"],\n          [\"zoom\"],\n          2,\n          [\n            \"case\",\n            [\"<\", [\"get\", \"population_rank\"], 13],\n            8,\n            [\">=\", [\"get\", \"population_rank\"], 13],\n            13,\n            0,\n          ],\n          4,\n          [\n            \"case\",\n            [\"<\", [\"get\", \"population_rank\"], 13],\n            10,\n            [\">=\", [\"get\", \"population_rank\"], 13],\n            15,\n            0,\n          ],\n          6,\n          [\n            \"case\",\n            [\"<\", [\"get\", \"population_rank\"], 12],\n            11,\n            [\">=\", [\"get\", \"population_rank\"], 12],\n            17,\n            0,\n          ],\n          8,\n          [\n            \"case\",\n            [\"<\", [\"get\", \"population_rank\"], 11],\n            11,\n            [\">=\", [\"get\", \"population_rank\"], 11],\n            18,\n            0,\n          ],\n          10,\n          [\n            \"case\",\n            [\"<\", [\"get\", \"population_rank\"], 9],\n            12,\n            [\">=\", [\"get\", \"population_rank\"], 9],\n            20,\n            0,\n          ],\n          15,\n          [\n            \"case\",\n            [\"<\", [\"get\", \"population_rank\"], 8],\n            12,\n            [\">=\", [\"get\", \"population_rank\"], 8],\n            22,\n            0,\n          ],\n        ],\n        \"icon-padding\": [\n          \"interpolate\",\n          [\"linear\"],\n          [\"zoom\"],\n          0,\n          0,\n          8,\n          4,\n          10,\n          8,\n          12,\n          6,\n          22,\n          2,\n        ],\n        \"text-justify\": \"auto\",\n        \"text-anchor\": [\"step\", [\"zoom\"], \"left\", 8, \"center\"],\n        \"text-radial-offset\": 0.4,\n      },\n      paint: {\n        \"text-color\": t.city_label,\n        \"text-halo-color\": t.city_label_halo,\n        \"text-halo-width\": 1,\n        \"text-halo-blur\": 1,\n      },\n    },\n    {\n      id: \"places_region\",\n      type: \"symbol\",\n      source: source,\n      \"source-layer\": \"places\",\n      filter: [\"==\", \"kind\", \"region\"],\n      layout: {\n        \"symbol-sort-key\": [\"get\", \"min_zoom\"],\n        \"text-field\": [\n          \"step\",\n          [\"zoom\"],\n          [\"get\", \"name:short\"],\n          6,\n          get_multiline_name(\n            lang,\n            script,\n            t.regular,\n          ) as ExpressionSpecification,\n        ],\n        \"text-font\": [t.regular || \"Noto Sans Regular\"],\n        \"text-size\": [\"interpolate\", [\"linear\"], [\"zoom\"], 3, 11, 7, 16],\n        \"text-radial-offset\": 0.2,\n        \"text-anchor\": \"center\",\n        \"text-transform\": \"uppercase\",\n      },\n      paint: {\n        \"text-color\": t.state_label,\n        \"text-halo-color\": t.state_label_halo,\n        \"text-halo-width\": 1,\n        \"text-halo-blur\": 1,\n      },\n    },\n    {\n      id: \"places_country\",\n      type: \"symbol\",\n      source: source,\n      \"source-layer\": \"places\",\n      filter: [\"==\", \"kind\", \"country\"],\n      layout: {\n        \"symbol-sort-key\": [\"get\", \"min_zoom\"],\n        \"text-field\": get_country_name(\n          lang,\n          script,\n        ) as DataDrivenPropertyValueSpecification<string>,\n        \"text-font\": [t.bold || \"Noto Sans Medium\"],\n        \"text-size\": [\n          \"interpolate\",\n          [\"linear\"],\n          [\"zoom\"],\n          2,\n          [\n            \"case\",\n            [\"<\", [\"get\", \"population_rank\"], 10],\n            8,\n            [\">=\", [\"get\", \"population_rank\"], 10],\n            12,\n            0,\n          ],\n          6,\n          [\n            \"case\",\n            [\"<\", [\"get\", \"population_rank\"], 8],\n            10,\n            [\">=\", [\"get\", \"population_rank\"], 8],\n            18,\n            0,\n          ],\n          8,\n          [\n            \"case\",\n            [\"<\", [\"get\", \"population_rank\"], 7],\n            11,\n            [\">=\", [\"get\", \"population_rank\"], 7],\n            20,\n            0,\n          ],\n        ],\n        \"icon-padding\": [\n          \"interpolate\",\n          [\"linear\"],\n          [\"zoom\"],\n          0,\n          2,\n          14,\n          2,\n          16,\n          20,\n          17,\n          2,\n          22,\n          2,\n        ],\n        \"text-transform\": \"uppercase\",\n      },\n      paint: {\n        \"text-color\": t.country_label,\n      },\n    },\n  ];\n}\n", "export interface Theme {\n  background: string;\n  earth: string;\n  park_a: string;\n  park_b: string;\n  hospital: string;\n  industrial: string;\n  school: string;\n  wood_a: string;\n  wood_b: string;\n  pedestrian: string;\n  scrub_a: string;\n  scrub_b: string;\n  glacier: string;\n  sand: string;\n  beach: string;\n  aerodrome: string;\n  runway: string;\n  water: string;\n  zoo: string;\n  military: string;\n\n  tunnel_other_casing: string;\n  tunnel_minor_casing: string;\n  tunnel_link_casing: string;\n  tunnel_major_casing: string;\n  tunnel_highway_casing: string;\n  tunnel_other: string;\n  tunnel_minor: string;\n  tunnel_link: string;\n  tunnel_major: string;\n  tunnel_highway: string;\n\n  pier: string;\n  buildings: string;\n\n  minor_service_casing: string;\n  minor_casing: string;\n  link_casing: string;\n  major_casing_late: string;\n  highway_casing_late: string;\n  other: string;\n  minor_service: string;\n  minor_a: string;\n  minor_b: string;\n  link: string;\n  major_casing_early: string;\n  major: string;\n  highway_casing_early: string;\n  highway: string;\n\n  railway: string;\n  boundaries: string;\n\n  bridges_other_casing: string;\n  bridges_minor_casing: string;\n  bridges_link_casing: string;\n  bridges_major_casing: string;\n  bridges_highway_casing: string;\n  bridges_other: string;\n  bridges_minor: string;\n  bridges_link: string;\n  bridges_major: string;\n  bridges_highway: string;\n\n  roads_label_minor: string;\n  roads_label_minor_halo: string;\n  roads_label_major: string;\n  roads_label_major_halo: string;\n  ocean_label: string;\n  subplace_label: string;\n  subplace_label_halo: string;\n  city_label: string;\n  city_label_halo: string;\n  state_label: string;\n  state_label_halo: string;\n  country_label: string;\n\n  regular?: string;\n  bold?: string;\n  italic?: string;\n\n  pois?: Pois;\n  landcover?: Landcover;\n\n  // deprecated\n  peak_label: string;\n  waterway_label: string;\n}\n\nexport interface Pois {\n  blue: string;\n  green: string;\n  lapis: string;\n  pink: string;\n  red: string;\n  slategray: string;\n  tangerine: string;\n  turquoise: string;\n}\n\nexport interface Landcover {\n  barren: string;\n  farmland: string;\n  forest: string;\n  glacier: string;\n  grassland: string;\n  scrub: string;\n  urban_area: string;\n}\n\nexport const CONTRAST: Theme = {\n  background: \"#dddddd\",\n  earth: \"#ededed\",\n  park_a: \"#bfc99c\",\n  park_b: \"#bfc99c\",\n  hospital: \"#ffeae8\",\n  industrial: \"#f8ffed\",\n  school: \"#f2fef9\",\n  wood_a: \"#bfc99c\",\n  wood_b: \"#bfc99c\",\n  pedestrian: \"#eef0f0\",\n  scrub_a: \"#bfc99c\",\n  scrub_b: \"#bfc99c\",\n  glacier: \"#ffffff\",\n  sand: \"#ebe7da\",\n  beach: \"#ebe7da\",\n  aerodrome: \"#dbe7e7\",\n  runway: \"#d1d9d9\",\n  water: \"#84b7cf\",\n  zoo: \"#ebe6ed\",\n  military: \"#ebe6ed\",\n\n  tunnel_other_casing: \"#ffffff\",\n  tunnel_minor_casing: \"#e2e2e2\",\n  tunnel_link_casing: \"#e2e2e2\",\n  tunnel_major_casing: \"#e3cfd3\",\n  tunnel_highway_casing: \"#ebcea2\",\n  tunnel_other: \"#f7f7f7\",\n  tunnel_minor: \"#ebebeb\",\n  tunnel_link: \"#ebebeb\",\n  tunnel_major: \"#ebebeb\",\n  tunnel_highway: \"#ebebeb\",\n\n  pier: \"#ededed\",\n  buildings: \"#cbcece\",\n\n  minor_service_casing: \"#e2e2e2\",\n  minor_casing: \"#e2e2e2\",\n  link_casing: \"#e2e2e2\",\n  major_casing_late: \"#e3cfd3\",\n  highway_casing_late: \"#ebcea2\",\n  other: \"#ffffff\",\n  minor_service: \"#ffffff\",\n  minor_a: \"#fff2bb\",\n  minor_b: \"#fff2bb\",\n  link: \"#fff2bb\",\n  major_casing_early: \"#e3cfd3\",\n  major: \"#ffdf59\",\n  highway_casing_early: \"#ebcea2\",\n  highway: \"#e9ac77\",\n\n  railway: \"#b3bcc9\",\n  boundaries: \"#5c4a6b\",\n  waterway_label: \"#a4cae1\",\n\n  bridges_other_casing: \"#ffffff\",\n  bridges_minor_casing: \"#e2e2e2\",\n  bridges_link_casing: \"#e1e1e1\",\n  bridges_major_casing: \"#e3cfd3\",\n  bridges_highway_casing: \"#ebcea2\",\n  bridges_other: \"#ffffff\",\n  bridges_minor: \"#ffffff\",\n  bridges_link: \"#e1e1e1\",\n  bridges_major: \"#ffffff\",\n  bridges_highway: \"#fefffc\",\n\n  roads_label_minor: \"#91888b\",\n  roads_label_minor_halo: \"#ffffff\",\n  roads_label_major: \"#91888b\",\n  roads_label_major_halo: \"#ffffff\",\n  ocean_label: \"#ffffff\",\n  peak_label: \"#61bb5b\",\n  subplace_label: \"#757d91\",\n  subplace_label_halo: \"#ffffff\",\n  city_label: \"#3c3c3c\",\n  city_label_halo: \"#ffffff\",\n  state_label: \"#777777\",\n  state_label_halo: \"#ffffff\",\n  country_label: \"#9590aa\",\n};\n\nexport const LIGHT: Theme = {\n  background: \"#cccccc\",\n  earth: \"#e2dfda\",\n  park_a: \"#cfddd5\",\n  park_b: \"#9cd3b4\",\n  hospital: \"#e4dad9\",\n  industrial: \"#d1dde1\",\n  school: \"#e4ded7\",\n  wood_a: \"#d0ded0\",\n  wood_b: \"#a0d9a0\",\n  pedestrian: \"#e3e0d4\",\n  scrub_a: \"#cedcd7\",\n  scrub_b: \"#99d2bb\",\n  glacier: \"#e7e7e7\",\n  sand: \"#e2e0d7\",\n  beach: \"#e8e4d0\",\n  aerodrome: \"#dadbdf\",\n  runway: \"#e9e9ed\",\n  water: \"#80deea\",\n  zoo: \"#c6dcdc\",\n  military: \"#dcdcdc\",\n\n  tunnel_other_casing: \"#e0e0e0\",\n  tunnel_minor_casing: \"#e0e0e0\",\n  tunnel_link_casing: \"#e0e0e0\",\n  tunnel_major_casing: \"#e0e0e0\",\n  tunnel_highway_casing: \"#e0e0e0\",\n  tunnel_other: \"#d5d5d5\",\n  tunnel_minor: \"#d5d5d5\",\n  tunnel_link: \"#d5d5d5\",\n  tunnel_major: \"#d5d5d5\",\n  tunnel_highway: \"#d5d5d5\",\n\n  pier: \"#e0e0e0\",\n  buildings: \"#cccccc\",\n\n  minor_service_casing: \"#e0e0e0\",\n  minor_casing: \"#e0e0e0\",\n  link_casing: \"#e0e0e0\",\n  major_casing_late: \"#e0e0e0\",\n  highway_casing_late: \"#e0e0e0\",\n  other: \"#ebebeb\",\n  minor_service: \"#ebebeb\",\n  minor_a: \"#ebebeb\",\n  minor_b: \"#ffffff\",\n  link: \"#ffffff\",\n  major_casing_early: \"#e0e0e0\",\n  major: \"#ffffff\",\n  highway_casing_early: \"#e0e0e0\",\n  highway: \"#ffffff\",\n\n  railway: \"#a7b1b3\",\n  boundaries: \"#adadad\",\n  waterway_label: \"#ffffff\",\n\n  bridges_other_casing: \"#e0e0e0\",\n  bridges_minor_casing: \"#e0e0e0\",\n  bridges_link_casing: \"#e0e0e0\",\n  bridges_major_casing: \"#e0e0e0\",\n  bridges_highway_casing: \"#e0e0e0\",\n  bridges_other: \"#ebebeb\",\n  bridges_minor: \"#ffffff\",\n  bridges_link: \"#ffffff\",\n  bridges_major: \"#f5f5f5\",\n  bridges_highway: \"#ffffff\",\n\n  roads_label_minor: \"#91888b\",\n  roads_label_minor_halo: \"#ffffff\",\n  roads_label_major: \"#938a8d\",\n  roads_label_major_halo: \"#ffffff\",\n  ocean_label: \"#728dd4\",\n  peak_label: \"#7e9aa0\",\n  subplace_label: \"#8f8f8f\",\n  subplace_label_halo: \"#e0e0e0\",\n  city_label: \"#5c5c5c\",\n  city_label_halo: \"#e0e0e0\",\n  state_label: \"#b3b3b3\",\n  state_label_halo: \"#e0e0e0\",\n  country_label: \"#a3a3a3\",\n\n  pois: {\n    blue: \"#1A8CBD\",\n    green: \"#20834D\",\n    lapis: \"#315BCF\",\n    pink: \"#EF56BA\",\n    red: \"#F2567A\",\n    slategray: \"#6A5B8F\",\n    tangerine: \"#CB6704\",\n    turquoise: \"#00C3D4\",\n  },\n\n  landcover: {\n    grassland: \"rgba(210, 239, 207, 1)\",\n    barren: \"rgba(255, 243, 215, 1)\",\n    urban_area: \"rgba(230, 230, 230, 1)\",\n    farmland: \"rgba(216, 239, 210, 1)\",\n    glacier: \"rgba(255, 255, 255, 1)\",\n    scrub: \"rgba(234, 239, 210, 1)\",\n    forest: \"rgba(196, 231, 210, 1)\",\n  },\n};\n\nexport const DARK: Theme = {\n  background: \"#34373d\",\n  earth: \"#1f1f1f\",\n  park_a: \"#1c2421\",\n  park_b: \"#192a24\",\n  hospital: \"#252424\",\n  industrial: \"#222222\",\n  school: \"#262323\",\n  wood_a: \"#202121\",\n  wood_b: \"#202121\",\n  pedestrian: \"#1e1e1e\",\n  scrub_a: \"#222323\",\n  scrub_b: \"#222323\",\n  glacier: \"#1c1c1c\",\n  sand: \"#212123\",\n  beach: \"#28282a\",\n  aerodrome: \"#1e1e1e\",\n  runway: \"#333333\",\n  water: \"#31353f\",\n  zoo: \"#222323\",\n  military: \"#242323\",\n\n  tunnel_other_casing: \"#141414\",\n  tunnel_minor_casing: \"#141414\",\n  tunnel_link_casing: \"#141414\",\n  tunnel_major_casing: \"#141414\",\n  tunnel_highway_casing: \"#141414\",\n  tunnel_other: \"#292929\",\n  tunnel_minor: \"#292929\",\n  tunnel_link: \"#292929\",\n  tunnel_major: \"#292929\",\n  tunnel_highway: \"#292929\",\n\n  pier: \"#333333\",\n  buildings: \"#111111\",\n\n  minor_service_casing: \"#1f1f1f\",\n  minor_casing: \"#1f1f1f\",\n  link_casing: \"#1f1f1f\",\n  major_casing_late: \"#1f1f1f\",\n  highway_casing_late: \"#1f1f1f\",\n  other: \"#333333\",\n  minor_service: \"#333333\",\n  minor_a: \"#3d3d3d\",\n  minor_b: \"#333333\",\n  link: \"#3d3d3d\",\n  major_casing_early: \"#1f1f1f\",\n  major: \"#3d3d3d\",\n  highway_casing_early: \"#1f1f1f\",\n  highway: \"#474747\",\n\n  railway: \"#000000\",\n  boundaries: \"#5b6374\",\n  waterway_label: \"#717784\",\n\n  bridges_other_casing: \"#2b2b2b\",\n  bridges_minor_casing: \"#1f1f1f\",\n  bridges_link_casing: \"#1f1f1f\",\n  bridges_major_casing: \"#1f1f1f\",\n  bridges_highway_casing: \"#1f1f1f\",\n  bridges_other: \"#333333\",\n  bridges_minor: \"#333333\",\n  bridges_link: \"#3d3d3d\",\n  bridges_major: \"#3d3d3d\",\n  bridges_highway: \"#474747\",\n\n  roads_label_minor: \"#525252\",\n  roads_label_minor_halo: \"#1f1f1f\",\n  roads_label_major: \"#666666\",\n  roads_label_major_halo: \"#1f1f1f\",\n  ocean_label: \"#717784\",\n  peak_label: \"#898080\",\n  subplace_label: \"#525252\",\n  subplace_label_halo: \"#1f1f1f\",\n  city_label: \"#7a7a7a\",\n  city_label_halo: \"#212121\",\n  state_label: \"#3d3d3d\",\n  state_label_halo: \"#1f1f1f\",\n  country_label: \"#5c5c5c\",\n\n  pois: {\n    blue: \"#4299BB\",\n    green: \"#30C573\",\n    lapis: \"#2B5CEA\",\n    pink: \"#EF56BA\",\n    red: \"#F2567A\",\n    slategray: \"#93939F\",\n    tangerine: \"#F19B6E\",\n    turquoise: \"#00C3D4\",\n  },\n\n  landcover: {\n    grassland: \"rgba(30, 41, 31, 1)\",\n    barren: \"rgba(38, 38, 36, 1)\",\n    urban_area: \"rgba(28, 28, 28, 1)\",\n    farmland: \"rgba(31, 36, 32, 1)\",\n    glacier: \"rgba(43, 43, 43, 1)\",\n    scrub: \"rgba(34, 36, 30, 1)\",\n    forest: \"rgba(28, 41, 37, 1)\",\n  },\n};\n\nexport const WHITE: Theme = {\n  background: \"#ffffff\",\n  earth: \"#ffffff\",\n  park_a: \"#fcfcfc\",\n  park_b: \"#fcfcfc\",\n  hospital: \"#f8f8f8\",\n  industrial: \"#fcfcfc\",\n  school: \"#f8f8f8\",\n  wood_a: \"#fafafa\",\n  wood_b: \"#fafafa\",\n  pedestrian: \"#fdfdfd\",\n  scrub_a: \"#fafafa\",\n  scrub_b: \"#fafafa\",\n  glacier: \"#fcfcfc\",\n  sand: \"#fafafa\",\n  beach: \"#f6f6f6\",\n  aerodrome: \"#fdfdfd\",\n  runway: \"#efefef\",\n  water: \"#dcdcdc\",\n  zoo: \"#f7f7f7\",\n  military: \"#fcfcfc\",\n\n  tunnel_other_casing: \"#d6d6d6\",\n  tunnel_minor_casing: \"#fcfcfc\",\n  tunnel_link_casing: \"#fcfcfc\",\n  tunnel_major_casing: \"#fcfcfc\",\n  tunnel_highway_casing: \"#fcfcfc\",\n  tunnel_other: \"#d6d6d6\",\n  tunnel_minor: \"#d6d6d6\",\n  tunnel_link: \"#d6d6d6\",\n  tunnel_major: \"#d6d6d6\",\n  tunnel_highway: \"#d6d6d6\",\n\n  pier: \"#efefef\",\n  buildings: \"#efefef\",\n\n  minor_service_casing: \"#ffffff\",\n  minor_casing: \"#ffffff\",\n  link_casing: \"#ffffff\",\n  major_casing_late: \"#ffffff\",\n  highway_casing_late: \"#ffffff\",\n  other: \"#f5f5f5\",\n  minor_service: \"#f5f5f5\",\n  minor_a: \"#ebebeb\",\n  minor_b: \"#f5f5f5\",\n  link: \"#ebebeb\",\n  major_casing_early: \"#ffffff\",\n  major: \"#ebebeb\",\n  highway_casing_early: \"#ffffff\",\n  highway: \"#ebebeb\",\n\n  railway: \"#d6d6d6\",\n  boundaries: \"#adadad\",\n  waterway_label: \"#adadad\",\n\n  bridges_other_casing: \"#ffffff\",\n  bridges_minor_casing: \"#ffffff\",\n  bridges_link_casing: \"#ffffff\",\n  bridges_major_casing: \"#ffffff\",\n  bridges_highway_casing: \"#ffffff\",\n  bridges_other: \"#f5f5f5\",\n  bridges_minor: \"#f5f5f5\",\n  bridges_link: \"#ebebeb\",\n  bridges_major: \"#ebebeb\",\n  bridges_highway: \"#ebebeb\",\n\n  roads_label_minor: \"#adadad\",\n  roads_label_minor_halo: \"#ffffff\",\n  roads_label_major: \"#999999\",\n  roads_label_major_halo: \"#ffffff\",\n  ocean_label: \"#adadad\",\n  peak_label: \"#adadad\",\n  subplace_label: \"#8f8f8f\",\n  subplace_label_halo: \"#ffffff\",\n  city_label: \"#5c5c5c\",\n  city_label_halo: \"#ffffff\",\n  state_label: \"#b3b3b3\",\n  state_label_halo: \"#ffffff\",\n  country_label: \"#b8b8b8\",\n};\n\nexport const GRAYSCALE: Theme = {\n  background: \"#a3a3a3\",\n  earth: \"#cccccc\",\n  park_a: \"#c2c2c2\",\n  park_b: \"#c2c2c2\",\n  hospital: \"#d0d0d0\",\n  industrial: \"#c6c6c6\",\n  school: \"#d0d0d0\",\n  wood_a: \"#c2c2c2\",\n  wood_b: \"#c2c2c2\",\n  pedestrian: \"#c4c4c4\",\n  scrub_a: \"#c2c2c2\",\n  scrub_b: \"#c2c2c2\",\n  glacier: \"#d2d2d2\",\n  sand: \"#d2d2d2\",\n  beach: \"#d2d2d2\",\n  aerodrome: \"#c9c9c9\",\n  runway: \"#f5f5f5\",\n  water: \"#a3a3a3\",\n  zoo: \"#c7c7c7\",\n  military: \"#bfbfbf\",\n\n  tunnel_other_casing: \"#b8b8b8\",\n  tunnel_minor_casing: \"#b8b8b8\",\n  tunnel_link_casing: \"#b8b8b8\",\n  tunnel_major_casing: \"#b8b8b8\",\n  tunnel_highway_casing: \"#b8b8b8\",\n  tunnel_other: \"#d6d6d6\",\n  tunnel_minor: \"#d6d6d6\",\n  tunnel_link: \"#d6d6d6\",\n  tunnel_major: \"#d6d6d6\",\n  tunnel_highway: \"#d6d6d6\",\n\n  pier: \"#b8b8b8\",\n  buildings: \"#e0e0e0\",\n\n  minor_service_casing: \"#cccccc\",\n  minor_casing: \"#cccccc\",\n  link_casing: \"#cccccc\",\n  major_casing_late: \"#cccccc\",\n  highway_casing_late: \"#cccccc\",\n  other: \"#e0e0e0\",\n  minor_service: \"#e0e0e0\",\n  minor_a: \"#ebebeb\",\n  minor_b: \"#e0e0e0\",\n  link: \"#ebebeb\",\n  major_casing_early: \"#cccccc\",\n  major: \"#ebebeb\",\n  highway_casing_early: \"#cccccc\",\n  highway: \"#ebebeb\",\n\n  railway: \"#f5f5f5\",\n  boundaries: \"#5c5c5c\",\n  waterway_label: \"#7a7a7a\",\n\n  bridges_other_casing: \"#cccccc\",\n  bridges_minor_casing: \"#cccccc\",\n  bridges_link_casing: \"#cccccc\",\n  bridges_major_casing: \"#cccccc\",\n  bridges_highway_casing: \"#cccccc\",\n  bridges_other: \"#e0e0e0\",\n  bridges_minor: \"#e0e0e0\",\n  bridges_link: \"#ebebeb\",\n  bridges_major: \"#ebebeb\",\n  bridges_highway: \"#ebebeb\",\n\n  roads_label_minor: \"#999999\",\n  roads_label_minor_halo: \"#e0e0e0\",\n  roads_label_major: \"#8f8f8f\",\n  roads_label_major_halo: \"#ebebeb\",\n  ocean_label: \"#7a7a7a\",\n  peak_label: \"#5c5c5c\",\n  subplace_label: \"#7a7a7a\",\n  subplace_label_halo: \"#cccccc\",\n  city_label: \"#474747\",\n  city_label_halo: \"#cccccc\",\n  state_label: \"#999999\",\n  state_label_halo: \"#cccccc\",\n  country_label: \"#858585\",\n};\n\nexport const BLACK: Theme = {\n  background: \"#2b2b2b\",\n  earth: \"#141414\",\n  park_a: \"#181818\",\n  park_b: \"#181818\",\n  hospital: \"#1d1d1d\",\n  industrial: \"#101010\",\n  school: \"#111111\",\n  wood_a: \"#1a1a1a\",\n  wood_b: \"#1a1a1a\",\n  pedestrian: \"#191919\",\n  scrub_a: \"#1c1c1c\",\n  scrub_b: \"#1c1c1c\",\n  glacier: \"#191919\",\n  sand: \"#161616\",\n  beach: \"#1f1f1f\",\n  aerodrome: \"#191919\",\n  runway: \"#323232\",\n  water: \"#333333\",\n  zoo: \"#191919\",\n  military: \"#121212\",\n\n  tunnel_other_casing: \"#101010\",\n  tunnel_minor_casing: \"#101010\",\n  tunnel_link_casing: \"#101010\",\n  tunnel_major_casing: \"#101010\",\n  tunnel_highway_casing: \"#101010\",\n  tunnel_other: \"#292929\",\n  tunnel_minor: \"#292929\",\n  tunnel_link: \"#292929\",\n  tunnel_major: \"#292929\",\n  tunnel_highway: \"#292929\",\n\n  pier: \"#0a0a0a\",\n  buildings: \"#0a0a0a\",\n\n  minor_service_casing: \"#141414\",\n  minor_casing: \"#141414\",\n  link_casing: \"#141414\",\n  major_casing_late: \"#141414\",\n  highway_casing_late: \"#141414\",\n  other: \"#1f1f1f\",\n  minor_service: \"#1f1f1f\",\n  minor_a: \"#292929\",\n  minor_b: \"#1f1f1f\",\n  link: \"#1f1f1f\",\n  major_casing_early: \"#141414\",\n  major: \"#292929\",\n  highway_casing_early: \"#141414\",\n  highway: \"#292929\",\n\n  railway: \"#292929\",\n  boundaries: \"#707070\",\n  waterway_label: \"#707070\",\n\n  bridges_other_casing: \"#141414\",\n  bridges_minor_casing: \"#141414\",\n  bridges_link_casing: \"#141414\",\n  bridges_major_casing: \"#141414\",\n  bridges_highway_casing: \"#141414\",\n  bridges_other: \"#1f1f1f\",\n  bridges_minor: \"#1f1f1f\",\n  bridges_link: \"#292929\",\n  bridges_major: \"#292929\",\n  bridges_highway: \"#292929\",\n\n  roads_label_minor: \"#525252\",\n  roads_label_minor_halo: \"#141414\",\n  roads_label_major: \"#5c5c5c\",\n  roads_label_major_halo: \"#141414\",\n  ocean_label: \"#707070\",\n  peak_label: \"#707070\",\n  subplace_label: \"#5c5c5c\",\n  subplace_label_halo: \"#141414\",\n  city_label: \"#999999\",\n  city_label_halo: \"#141414\",\n  state_label: \"#3d3d3d\",\n  state_label_halo: \"#141414\",\n  country_label: \"#707070\",\n};\n\nconst themes: Record<string, Theme> = {\n  light: LIGHT,\n  dark: DARK,\n  white: WHITE,\n  grayscale: GRAYSCALE,\n  black: BLACK,\n  contrast: CONTRAST,\n};\n\nexport default themes;\n", "import { LayerSpecification } from \"@maplibre/maplibre-gl-style-spec\";\nimport { labels_layers, nolabels_layers } from \"./base_layers\";\nimport { language_script_pairs } from \"./language\";\nimport themes, { Theme, Pois } from \"./themes\";\n\nexport { language_script_pairs };\nexport type { Theme, Pois };\n\nexport default function (\n  source: string,\n  key: string,\n  lang: string,\n  script?: string,\n): LayerSpecification[] {\n  const theme = themes[key];\n  return nolabels_layers(source, theme).concat(\n    labels_layers(source, theme, lang, script),\n  );\n}\n\nexport function noLabels(source: string, key: string): LayerSpecification[] {\n  const theme = themes[key];\n  return nolabels_layers(source, theme);\n}\n\nexport function labels(\n  source: string,\n  key: string,\n  lang: string,\n  script?: string,\n): LayerSpecification[] {\n  const theme = themes[key];\n  return labels_layers(source, theme, lang, script);\n}\n\nexport function layersWithCustomTheme(\n  source: string,\n  theme: Theme,\n  lang: string,\n  script?: string,\n): LayerSpecification[] {\n  return nolabels_layers(source, theme).concat(\n    labels_layers(source, theme, lang, script),\n  );\n}\n\nexport function layersWithPartialCustomTheme(\n  source: string,\n  key: string,\n  partialTheme: Partial<Theme>,\n  lang: string,\n  script?: string,\n): LayerSpecification[] {\n  const mergedTheme = { ...themes[key], ...partialTheme };\n  return nolabels_layers(source, mergedTheme).concat(\n    labels_layers(source, mergedTheme, lang, script),\n  );\n}\n\nexport function noLabelsWithCustomTheme(\n  source: string,\n  theme: Theme,\n): LayerSpecification[] {\n  return nolabels_layers(source, theme);\n}\n\nexport function labelsWithCustomTheme(\n  source: string,\n  theme: Theme,\n  lang: string,\n  script?: string,\n): LayerSpecification[] {\n  return labels_layers(source, theme, lang, script);\n}\n", "import layers from \"protomaps-themes-base\";\nimport { init, getOptions, getStyleType } from \"./Modules/MapLibre.mjs\";\n\nasync function setOptions() {\n    const options = await getOptions();\n    const { glyphs, url, attribution, style, sprite } = options.service.options;\n\n    const styleFunction = () => {\n        const theme = getStyleType(style);\n        return {\n            version: 8,\n            glyphs,\n            sprite: sprite.replaceAll(\"{{STYLE}}\", theme),\n            sources: {\n                protomaps: {\n                    type: \"vector\",\n                    url,\n                    attribution,\n                },\n            },\n            layers: layers(\"protomaps\", theme),\n        };\n    };\n    init({ styleFunction, options });\n}\n\nsetOptions();\n"],
  "mappings": "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YACA,UACA,WACA,iBACA,UACA,aACA,UACA,SACA,SACA,UACA,gBACF,CACF,CACF,EACA,CAAC,KAAM,CAAC,MAAM,EAAG,CAAC,IAAK,CAAC,MAAO,UAAU,EAAG,CAAC,CAAC,CAChD,EACA,OAAQ,CACN,aAAc,CACZ,QACA,CAAC,MAAO,MAAM,EACd,UACA,gBACA,CAAC,MAAO,MAAM,CAChB,EACA,YAAa,CAACC,EAAE,SAAW,mBAAmB,EAC9C,eAAgB,OAChB,aAAcH,EACZV,EACAH,EACAgB,EAAE,OACJ,EACA,YAAa,CACX,cACA,CAAC,QAAQ,EACT,CAAC,MAAM,EACP,GACA,GACA,GACA,EACF,EACA,iBAAkB,EAClB,cAAe,CAAC,IAAK,CAAC,EACtB,uBAAwB,CAAC,OAAQ,OAAO,CAC1C,EACA,MAAO,CACL,aAAc,CACZ,OACA,CACE,KACA,CAAC,MAAO,MAAM,EACd,CACE,UACA,CACE,QACA,SACA,SACA,OACA,OACA,MACA,SACA,OACF,CACF,CACF,EACAA,EAAE,KAAK,MACP,CACE,KACA,CAAC,MAAO,MAAM,EACd,CACE,UACA,CAAC,YAAa,UAAW,WAAY,gBAAgB,CACvD,CACF,EACAA,EAAE,KAAK,MACP,CACE,KACA,CAAC,MAAO,MAAM,EACd,CACE,UACA,CACE,UACA,aACA,UACA,SACA,SACA,UACA,gBACF,CACF,CACF,EACAA,EAAE,KAAK,UACPA,EAAE,KACJ,CACF,CACF,CACF,EACA,CAAC,EACL,CACE,GAAI,kBACJ,KAAM,SACN,OAAQD,EACR,eAAgB,SAChB,OAAQ,CAAC,KAAM,OAAQ,eAAe,EACtC,OAAQ,CACN,kBAAmB,CAAC,MAAO,UAAU,EACrC,aAAcF,EACZV,EACAH,EACAgB,EAAE,OACJ,EACA,YAAa,CAACA,EAAE,SAAW,mBAAmB,EAC9C,iBAAkB,EAClB,sBAAuB,GACvB,eAAgB,CACd,cACA,CAAC,QAAQ,EACT,CAAC,MAAM,EACP,EACA,EACA,EACA,EACA,GACA,GACA,GACA,EACF,EACA,YAAa,CACX,cACA,CAAC,cAAe,GAAG,EACnB,CAAC,MAAM,EACP,GACA,EACA,GACA,GACA,GACA,EACF,EACA,iBAAkB,WACpB,EACA,MAAO,CACL,aAAcA,EAAE,eAChB,kBAAmBA,EAAE,oBACrB,kBAAmB,EACnB,iBAAkB,CACpB,CACF,EACA,CACE,GAAI,kBACJ,KAAM,SACN,OAAQD,EACR,eAAgB,SAChB,OAAQ,CAAC,KAAM,OAAQ,UAAU,EACjC,OAAQ,CACN,aAAc,CAAC,OAAQ,CAAC,MAAM,EAAG,WAAY,EAAG,EAAE,EAClD,YAAa,GACb,aAAcF,EACZV,EACAH,EACAgB,EAAE,OACJ,EACA,YAAa,CACX,OACA,CAAC,KAAM,CAAC,MAAO,UAAU,EAAG,CAAC,EAC7B,CAAC,UAAW,CAACA,EAAE,MAAQ,kBAAkB,CAAC,EAC1C,CAAC,UAAW,CAACA,EAAE,SAAW,mBAAmB,CAAC,CAChD,EACA,eAAgB,CACd,cACA,CAAC,QAAQ,EACT,CAAC,MAAM,EACP,EACA,EACA,EACA,EACA,GACA,EACF,EACA,YAAa,CACX,cACA,CAAC,QAAQ,EACT,CAAC,MAAM,EACP,EACA,CACE,OACA,CAAC,IAAK,CAAC,MAAO,iBAAiB,EAAG,EAAE,EACpC,EACA,CAAC,KAAM,CAAC,MAAO,iBAAiB,EAAG,EAAE,EACrC,GACA,CACF,EACA,EACA,CACE,OACA,CAAC,IAAK,CAAC,MAAO,iBAAiB,EAAG,EAAE,EACpC,GACA,CAAC,KAAM,CAAC,MAAO,iBAAiB,EAAG,EAAE,EACrC,GACA,CACF,EACA,EACA,CACE,OACA,CAAC,IAAK,CAAC,MAAO,iBAAiB,EAAG,EAAE,EACpC,GACA,CAAC,KAAM,CAAC,MAAO,iBAAiB,EAAG,EAAE,EACrC,GACA,CACF,EACA,EACA,CACE,OACA,CAAC,IAAK,CAAC,MAAO,iBAAiB,EAAG,EAAE,EACpC,GACA,CAAC,KAAM,CAAC,MAAO,iBAAiB,EAAG,EAAE,EACrC,GACA,CACF,EACA,GACA,CACE,OACA,CAAC,IAAK,CAAC,MAAO,iBAAiB,EAAG,CAAC,EACnC,GACA,CAAC,KAAM,CAAC,MAAO,iBAAiB,EAAG,CAAC,EACpC,GACA,CACF,EACA,GACA,CACE,OACA,CAAC,IAAK,CAAC,MAAO,iBAAiB,EAAG,CAAC,EACnC,GACA,CAAC,KAAM,CAAC,MAAO,iBAAiB,EAAG,CAAC,EACpC,GACA,CACF,CACF,EACA,eAAgB,CACd,cACA,CAAC,QAAQ,EACT,CAAC,MAAM,EACP,EACA,EACA,EACA,EACA,GACA,EACA,GACA,EACA,GACA,CACF,EACA,eAAgB,OAChB,cAAe,CAAC,OAAQ,CAAC,MAAM,EAAG,OAAQ,EAAG,QAAQ,EACrD,qBAAsB,EACxB,EACA,MAAO,CACL,aAAcA,EAAE,WAChB,kBAAmBA,EAAE,gBACrB,kBAAmB,EACnB,iBAAkB,CACpB,CACF,EACA,CACE,GAAI,gBACJ,KAAM,SACN,OAAQD,EACR,eAAgB,SAChB,OAAQ,CAAC,KAAM,OAAQ,QAAQ,EAC/B,OAAQ,CACN,kBAAmB,CAAC,MAAO,UAAU,EACrC,aAAc,CACZ,OACA,CAAC,MAAM,EACP,CAAC,MAAO,YAAY,EACpB,EACAF,EACEV,EACAH,EACAgB,EAAE,OACJ,CACF,EACA,YAAa,CAACA,EAAE,SAAW,mBAAmB,EAC9C,YAAa,CAAC,cAAe,CAAC,QAAQ,EAAG,CAAC,MAAM,EAAG,EAAG,GAAI,EAAG,EAAE,EAC/D,qBAAsB,GACtB,cAAe,SACf,iBAAkB,WACpB,EACA,MAAO,CACL,aAAcA,EAAE,YAChB,kBAAmBA,EAAE,iBACrB,kBAAmB,EACnB,iBAAkB,CACpB,CACF,EACA,CACE,GAAI,iBACJ,KAAM,SACN,OAAQD,EACR,eAAgB,SAChB,OAAQ,CAAC,KAAM,OAAQ,SAAS,EAChC,OAAQ,CACN,kBAAmB,CAAC,MAAO,UAAU,EACrC,aAAcL,EACZP,EACAH,CACF,EACA,YAAa,CAACgB,EAAE,MAAQ,kBAAkB,EAC1C,YAAa,CACX,cACA,CAAC,QAAQ,EACT,CAAC,MAAM,EACP,EACA,CACE,OACA,CAAC,IAAK,CAAC,MAAO,iBAAiB,EAAG,EAAE,EACpC,EACA,CAAC,KAAM,CAAC,MAAO,iBAAiB,EAAG,EAAE,EACrC,GACA,CACF,EACA,EACA,CACE,OACA,CAAC,IAAK,CAAC,MAAO,iBAAiB,EAAG,CAAC,EACnC,GACA,CAAC,KAAM,CAAC,MAAO,iBAAiB,EAAG,CAAC,EACpC,GACA,CACF,EACA,EACA,CACE,OACA,CAAC,IAAK,CAAC,MAAO,iBAAiB,EAAG,CAAC,EACnC,GACA,CAAC,KAAM,CAAC,MAAO,iBAAiB,EAAG,CAAC,EACpC,GACA,CACF,CACF,EACA,eAAgB,CACd,cACA,CAAC,QAAQ,EACT,CAAC,MAAM,EACP,EACA,EACA,GACA,EACA,GACA,GACA,GACA,EACA,GACA,CACF,EACA,iBAAkB,WACpB,EACA,MAAO,CACL,aAAcA,EAAE,aAClB,CACF,CACF,CACF,CAlgBgBf,EAAAgB,EAAA,eAAA,ECzuCT,IAAMC,EAAkB,CAC7B,WAAY,UACZ,MAAO,UACP,OAAQ,UACR,OAAQ,UACR,SAAU,UACV,WAAY,UACZ,OAAQ,UACR,OAAQ,UACR,OAAQ,UACR,WAAY,UACZ,QAAS,UACT,QAAS,UACT,QAAS,UACT,KAAM,UACN,MAAO,UACP,UAAW,UACX,OAAQ,UACR,MAAO,UACP,IAAK,UACL,SAAU,UAEV,oBAAqB,UACrB,oBAAqB,UACrB,mBAAoB,UACpB,oBAAqB,UACrB,sBAAuB,UACvB,aAAc,UACd,aAAc,UACd,YAAa,UACb,aAAc,UACd,eAAgB,UAEhB,KAAM,UACN,UAAW,UAEX,qBAAsB,UACtB,aAAc,UACd,YAAa,UACb,kBAAmB,UACnB,oBAAqB,UACrB,MAAO,UACP,cAAe,UACf,QAAS,UACT,QAAS,UACT,KAAM,UACN,mBAAoB,UACpB,MAAO,UACP,qBAAsB,UACtB,QAAS,UAET,QAAS,UACT,WAAY,UACZ,eAAgB,UAEhB,qBAAsB,UACtB,qBAAsB,UACtB,oBAAqB,UACrB,qBAAsB,UACtB,uBAAwB,UACxB,cAAe,UACf,cAAe,UACf,aAAc,UACd,cAAe,UACf,gBAAiB,UAEjB,kBAAmB,UACnB,uBAAwB,UACxB,kBAAmB,UACnB,uBAAwB,UACxB,YAAa,UACb,WAAY,UACZ,eAAgB,UAChB,oBAAqB,UACrB,WAAY,UACZ,gBAAiB,UACjB,YAAa,UACb,iBAAkB,UAClB,cAAe,SACjB,EAEaC,EAAe,CAC1B,WAAY,UACZ,MAAO,UACP,OAAQ,UACR,OAAQ,UACR,SAAU,UACV,WAAY,UACZ,OAAQ,UACR,OAAQ,UACR,OAAQ,UACR,WAAY,UACZ,QAAS,UACT,QAAS,UACT,QAAS,UACT,KAAM,UACN,MAAO,UACP,UAAW,UACX,OAAQ,UACR,MAAO,UACP,IAAK,UACL,SAAU,UAEV,oBAAqB,UACrB,oBAAqB,UACrB,mBAAoB,UACpB,oBAAqB,UACrB,sBAAuB,UACvB,aAAc,UACd,aAAc,UACd,YAAa,UACb,aAAc,UACd,eAAgB,UAEhB,KAAM,UACN,UAAW,UAEX,qBAAsB,UACtB,aAAc,UACd,YAAa,UACb,kBAAmB,UACnB,oBAAqB,UACrB,MAAO,UACP,cAAe,UACf,QAAS,UACT,QAAS,UACT,KAAM,UACN,mBAAoB,UACpB,MAAO,UACP,qBAAsB,UACtB,QAAS,UAET,QAAS,UACT,WAAY,UACZ,eAAgB,UAEhB,qBAAsB,UACtB,qBAAsB,UACtB,oBAAqB,UACrB,qBAAsB,UACtB,uBAAwB,UACxB,cAAe,UACf,cAAe,UACf,aAAc,UACd,cAAe,UACf,gBAAiB,UAEjB,kBAAmB,UACnB,uBAAwB,UACxB,kBAAmB,UACnB,uBAAwB,UACxB,YAAa,UACb,WAAY,UACZ,eAAgB,UAChB,oBAAqB,UACrB,WAAY,UACZ,gBAAiB,UACjB,YAAa,UACb,iBAAkB,UAClB,cAAe,UAEf,KAAM,CACJ,KAAM,UACN,MAAO,UACP,MAAO,UACP,KAAM,UACN,IAAK,UACL,UAAW,UACX,UAAW,UACX,UAAW,SACb,EAEA,UAAW,CACT,UAAW,yBACX,OAAQ,yBACR,WAAY,yBACZ,SAAU,yBACV,QAAS,yBACT,MAAO,yBACP,OAAQ,wBACV,CACF,EAEaC,EAAc,CACzB,WAAY,UACZ,MAAO,UACP,OAAQ,UACR,OAAQ,UACR,SAAU,UACV,WAAY,UACZ,OAAQ,UACR,OAAQ,UACR,OAAQ,UACR,WAAY,UACZ,QAAS,UACT,QAAS,UACT,QAAS,UACT,KAAM,UACN,MAAO,UACP,UAAW,UACX,OAAQ,UACR,MAAO,UACP,IAAK,UACL,SAAU,UAEV,oBAAqB,UACrB,oBAAqB,UACrB,mBAAoB,UACpB,oBAAqB,UACrB,sBAAuB,UACvB,aAAc,UACd,aAAc,UACd,YAAa,UACb,aAAc,UACd,eAAgB,UAEhB,KAAM,UACN,UAAW,UAEX,qBAAsB,UACtB,aAAc,UACd,YAAa,UACb,kBAAmB,UACnB,oBAAqB,UACrB,MAAO,UACP,cAAe,UACf,QAAS,UACT,QAAS,UACT,KAAM,UACN,mBAAoB,UACpB,MAAO,UACP,qBAAsB,UACtB,QAAS,UAET,QAAS,UACT,WAAY,UACZ,eAAgB,UAEhB,qBAAsB,UACtB,qBAAsB,UACtB,oBAAqB,UACrB,qBAAsB,UACtB,uBAAwB,UACxB,cAAe,UACf,cAAe,UACf,aAAc,UACd,cAAe,UACf,gBAAiB,UAEjB,kBAAmB,UACnB,uBAAwB,UACxB,kBAAmB,UACnB,uBAAwB,UACxB,YAAa,UACb,WAAY,UACZ,eAAgB,UAChB,oBAAqB,UACrB,WAAY,UACZ,gBAAiB,UACjB,YAAa,UACb,iBAAkB,UAClB,cAAe,UAEf,KAAM,CACJ,KAAM,UACN,MAAO,UACP,MAAO,UACP,KAAM,UACN,IAAK,UACL,UAAW,UACX,UAAW,UACX,UAAW,SACb,EAEA,UAAW,CACT,UAAW,sBACX,OAAQ,sBACR,WAAY,sBACZ,SAAU,sBACV,QAAS,sBACT,MAAO,sBACP,OAAQ,qBACV,CACF,EAEaC,EAAe,CAC1B,WAAY,UACZ,MAAO,UACP,OAAQ,UACR,OAAQ,UACR,SAAU,UACV,WAAY,UACZ,OAAQ,UACR,OAAQ,UACR,OAAQ,UACR,WAAY,UACZ,QAAS,UACT,QAAS,UACT,QAAS,UACT,KAAM,UACN,MAAO,UACP,UAAW,UACX,OAAQ,UACR,MAAO,UACP,IAAK,UACL,SAAU,UAEV,oBAAqB,UACrB,oBAAqB,UACrB,mBAAoB,UACpB,oBAAqB,UACrB,sBAAuB,UACvB,aAAc,UACd,aAAc,UACd,YAAa,UACb,aAAc,UACd,eAAgB,UAEhB,KAAM,UACN,UAAW,UAEX,qBAAsB,UACtB,aAAc,UACd,YAAa,UACb,kBAAmB,UACnB,oBAAqB,UACrB,MAAO,UACP,cAAe,UACf,QAAS,UACT,QAAS,UACT,KAAM,UACN,mBAAoB,UACpB,MAAO,UACP,qBAAsB,UACtB,QAAS,UAET,QAAS,UACT,WAAY,UACZ,eAAgB,UAEhB,qBAAsB,UACtB,qBAAsB,UACtB,oBAAqB,UACrB,qBAAsB,UACtB,uBAAwB,UACxB,cAAe,UACf,cAAe,UACf,aAAc,UACd,cAAe,UACf,gBAAiB,UAEjB,kBAAmB,UACnB,uBAAwB,UACxB,kBAAmB,UACnB,uBAAwB,UACxB,YAAa,UACb,WAAY,UACZ,eAAgB,UAChB,oBAAqB,UACrB,WAAY,UACZ,gBAAiB,UACjB,YAAa,UACb,iBAAkB,UAClB,cAAe,SACjB,EAEaC,EAAmB,CAC9B,WAAY,UACZ,MAAO,UACP,OAAQ,UACR,OAAQ,UACR,SAAU,UACV,WAAY,UACZ,OAAQ,UACR,OAAQ,UACR,OAAQ,UACR,WAAY,UACZ,QAAS,UACT,QAAS,UACT,QAAS,UACT,KAAM,UACN,MAAO,UACP,UAAW,UACX,OAAQ,UACR,MAAO,UACP,IAAK,UACL,SAAU,UAEV,oBAAqB,UACrB,oBAAqB,UACrB,mBAAoB,UACpB,oBAAqB,UACrB,sBAAuB,UACvB,aAAc,UACd,aAAc,UACd,YAAa,UACb,aAAc,UACd,eAAgB,UAEhB,KAAM,UACN,UAAW,UAEX,qBAAsB,UACtB,aAAc,UACd,YAAa,UACb,kBAAmB,UACnB,oBAAqB,UACrB,MAAO,UACP,cAAe,UACf,QAAS,UACT,QAAS,UACT,KAAM,UACN,mBAAoB,UACpB,MAAO,UACP,qBAAsB,UACtB,QAAS,UAET,QAAS,UACT,WAAY,UACZ,eAAgB,UAEhB,qBAAsB,UACtB,qBAAsB,UACtB,oBAAqB,UACrB,qBAAsB,UACtB,uBAAwB,UACxB,cAAe,UACf,cAAe,UACf,aAAc,UACd,cAAe,UACf,gBAAiB,UAEjB,kBAAmB,UACnB,uBAAwB,UACxB,kBAAmB,UACnB,uBAAwB,UACxB,YAAa,UACb,WAAY,UACZ,eAAgB,UAChB,oBAAqB,UACrB,WAAY,UACZ,gBAAiB,UACjB,YAAa,UACb,iBAAkB,UAClB,cAAe,SACjB,EAEaC,EAAe,CAC1B,WAAY,UACZ,MAAO,UACP,OAAQ,UACR,OAAQ,UACR,SAAU,UACV,WAAY,UACZ,OAAQ,UACR,OAAQ,UACR,OAAQ,UACR,WAAY,UACZ,QAAS,UACT,QAAS,UACT,QAAS,UACT,KAAM,UACN,MAAO,UACP,UAAW,UACX,OAAQ,UACR,MAAO,UACP,IAAK,UACL,SAAU,UAEV,oBAAqB,UACrB,oBAAqB,UACrB,mBAAoB,UACpB,oBAAqB,UACrB,sBAAuB,UACvB,aAAc,UACd,aAAc,UACd,YAAa,UACb,aAAc,UACd,eAAgB,UAEhB,KAAM,UACN,UAAW,UAEX,qBAAsB,UACtB,aAAc,UACd,YAAa,UACb,kBAAmB,UACnB,oBAAqB,UACrB,MAAO,UACP,cAAe,UACf,QAAS,UACT,QAAS,UACT,KAAM,UACN,mBAAoB,UACpB,MAAO,UACP,qBAAsB,UACtB,QAAS,UAET,QAAS,UACT,WAAY,UACZ,eAAgB,UAEhB,qBAAsB,UACtB,qBAAsB,UACtB,oBAAqB,UACrB,qBAAsB,UACtB,uBAAwB,UACxB,cAAe,UACf,cAAe,UACf,aAAc,UACd,cAAe,UACf,gBAAiB,UAEjB,kBAAmB,UACnB,uBAAwB,UACxB,kBAAmB,UACnB,uBAAwB,UACxB,YAAa,UACb,WAAY,UACZ,eAAgB,UAChB,oBAAqB,UACrB,WAAY,UACZ,gBAAiB,UACjB,YAAa,UACb,iBAAkB,UAClB,cAAe,SACjB,EAEMC,EAAgC,CACpC,MAAOL,EACP,KAAMC,EACN,MAAOC,EACP,UAAWC,EACX,MAAOC,EACP,SAAUL,CACZ,EAEOO,EAAQD,EChoBA,SAARE,EACLX,EACAY,EACAxB,EACAH,EACsB,CACtB,IAAM4B,EAAQH,EAAOE,CAAG,EACxB,OAAOb,EAAgBC,EAAQa,CAAK,EAAE,OACpCX,EAAcF,EAAQa,EAAOzB,EAAMH,CAAM,CAC3C,CACF,CAVOC,EAAAyB,EAAA,SAAA,EAYA,SAASG,EAASd,EAAgBY,EAAmC,CAC1E,IAAMC,EAAQH,EAAOE,CAAG,EACxB,OAAOb,EAAgBC,EAAQa,CAAK,CACtC,CAHgB3B,EAAA4B,EAAA,UAAA,EAKT,SAASC,EACdf,EACAY,EACAxB,EACAH,EACsB,CACtB,IAAM4B,EAAQH,EAAOE,CAAG,EACxB,OAAOV,EAAcF,EAAQa,EAAOzB,EAAMH,CAAM,CAClD,CARgBC,EAAA6B,EAAA,QAAA,EAUT,SAASC,EACdhB,EACAa,EACAzB,EACAH,EACsB,CACtB,OAAOc,EAAgBC,EAAQa,CAAK,EAAE,OACpCX,EAAcF,EAAQa,EAAOzB,EAAMH,CAAM,CAC3C,CACF,CATgBC,EAAA8B,EAAA,uBAAA,EAWT,SAASC,EACdjB,EACAY,EACAM,EACA9B,EACAH,EACsB,CACtB,IAAMkC,EAAcC,EAAAA,EAAA,CAAA,EAAKV,EAAOE,CAAG,CAAA,EAAMM,CAAAA,EACzC,OAAOnB,EAAgBC,EAAQmB,CAAW,EAAE,OAC1CjB,EAAcF,EAAQmB,EAAa/B,EAAMH,CAAM,CACjD,CACF,CAXgBC,EAAA+B,EAAA,8BAAA,EAaT,SAASI,EACdrB,EACAa,EACsB,CACtB,OAAOd,EAAgBC,EAAQa,CAAK,CACtC,CALgB3B,EAAAmC,EAAA,yBAAA,EAOT,SAASC,EACdtB,EACAa,EACAzB,EACAH,EACsB,CACtB,OAAOiB,EAAcF,EAAQa,EAAOzB,EAAMH,CAAM,CAClD,CAPgBC,EAAAoC,EAAA,uBAAA,EC/DhB,eAAeC,GAAa,CACxB,IAAMC,EAAU,MAAMC,EAAW,EAC3B,CAAE,OAAAC,EAAQ,IAAAC,EAAK,YAAAC,EAAa,MAAAC,EAAO,OAAAC,CAAO,EAAIN,EAAQ,QAAQ,QAkBpEO,EAAK,CAAE,cAhBe,IAAM,CACxB,IAAMC,EAAQC,EAAaJ,CAAK,EAChC,MAAO,CACH,QAAS,EACT,OAAAH,EACA,OAAQI,EAAO,WAAW,YAAaE,CAAK,EAC5C,QAAS,CACL,UAAW,CACP,KAAM,SACN,IAAAL,EACA,YAAAC,CACJ,CACJ,EACA,OAAQM,EAAO,YAAaF,CAAK,CACrC,CACJ,EACsB,QAAAR,CAAQ,CAAC,CACnC,CAEAD,EAAW",
  "names": ["get_name_block", "script_segment", "regular", "script", "__name", "is_not_in_target_script", "lang", "suffix", "get_font_formatting", "get_default_script", "pair", "language_script_pairs", "d", "get_country_name", "_script", "name_prefix", "get_multiline_name", "nolabels_layers", "source", "t", "labels_layers", "CONTRAST", "LIGHT", "DARK", "WHITE", "GRAYSCALE", "BLACK", "themes", "themes_default", "src_default", "key", "theme", "noLabels", "labels", "layersWithCustomTheme", "layersWithPartialCustomTheme", "partialTheme", "mergedTheme", "__spreadValues", "noLabelsWithCustomTheme", "labelsWithCustomTheme", "setOptions", "options", "getOptions", "glyphs", "url", "attribution", "style", "sprite", "init", "theme", "getStyleType", "T"]
}
